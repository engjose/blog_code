{"meta":{"title":"SUPER-JOSE-大叔的技术博客","subtitle":"There is no shortcut is a permanent shortcut","description":"踏踏实实做人,认认真真编程","author":"SUPER-JOSE","url":"http://www.fireworm.online"},"pages":[{"title":"categories","date":"2017-05-21T09:37:55.000Z","updated":"2017-05-21T09:38:27.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.fireworm.online/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-05-21T09:20:01.000Z","updated":"2017-05-21T09:21:20.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.fireworm.online/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"电商实战(五)---数据库设计","slug":"电商实战-五-数据库设计","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-五-数据库设计.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-五-数据库设计.html","excerpt":"","text":"数据库设计数据表结构 建表语句1.user表1234567891011121314CREATE TABLE `mmall_user` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户表id', `username` varchar(50) NOT NULL COMMENT '用户名', `password` varchar(50) NOT NULL COMMENT '用户密码，MD5加密', `email` varchar(50) DEFAULT NULL, `phone` varchar(20) DEFAULT NULL, `question` varchar(100) DEFAULT NULL COMMENT '找回密码问题', `answer` varchar(100) DEFAULT NULL COMMENT '找回密码答案', `role` int(4) NOT NULL COMMENT '角色0-管理员,1-普通用户', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '最后一次更新时间', PRIMARY KEY (`id`), UNIQUE KEY `user_name_unique` (`username`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8 2.分类表category12345678910CREATE TABLE `mmall_category` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '类别Id', `parent_id` int(11) DEFAULT NULL COMMENT '父类别id当id=0时说明是根节点,一级类别', `name` varchar(50) DEFAULT NULL COMMENT '类别名称', `status` tinyint(1) DEFAULT '1' COMMENT '类别状态1-正常,2-已废弃', `sort_order` int(4) DEFAULT NULL COMMENT '排序编号,同类展示顺序,数值相等则自然排序', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=100032 DEFAULT CHARSET=utf8 3.产品表product123456789101112131415CREATE TABLE `mmall_product` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商品id', `category_id` int(11) NOT NULL COMMENT '分类id,对应mmall_category表的主键', `name` varchar(100) NOT NULL COMMENT '商品名称', `subtitle` varchar(200) DEFAULT NULL COMMENT '商品副标题', `main_image` varchar(500) DEFAULT NULL COMMENT '产品主图,url相对地址', `sub_images` text COMMENT '图片地址,json格式,扩展用', `detail` text COMMENT '商品详情', `price` decimal(20,2) NOT NULL COMMENT '价格,单位-元保留两位小数', `stock` int(11) NOT NULL COMMENT '库存数量', `status` int(6) DEFAULT '1' COMMENT '商品状态.1-在售 2-下架 3-删除', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 4.收货地址表shipping123456789101112131415CREATE TABLE `mmall_shipping` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT '用户id', `receiver_name` varchar(20) DEFAULT NULL COMMENT '收货姓名', `receiver_phone` varchar(20) DEFAULT NULL COMMENT '收货固定电话', `receiver_mobile` varchar(20) DEFAULT NULL COMMENT '收货移动电话', `receiver_province` varchar(20) DEFAULT NULL COMMENT '省份', `receiver_city` varchar(20) DEFAULT NULL COMMENT '城市', `receiver_district` varchar(20) DEFAULT NULL COMMENT '区/县', `receiver_address` varchar(200) DEFAULT NULL COMMENT '详细地址', `receiver_zip` varchar(6) DEFAULT NULL COMMENT '邮编', `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 5.购物车表:cart1234567891011CREATE TABLE `mmall_cart` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `product_id` int(11) DEFAULT NULL COMMENT '商品id', `quantity` int(11) DEFAULT NULL COMMENT '数量', `checked` int(11) DEFAULT NULL COMMENT '是否选择,1=已勾选,0=未勾选', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`), KEY `user_id_index` (`user_id`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=146 DEFAULT CHARSET=utf8 6.订单表order123456789101112131415161718CREATE TABLE `mmall_order` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单id', `order_no` bigint(20) DEFAULT NULL COMMENT '订单号', `user_id` int(11) DEFAULT NULL COMMENT '用户id', `shipping_id` int(11) DEFAULT NULL, `payment` decimal(20,2) DEFAULT NULL COMMENT '实际付款金额,单位是元,保留两位小数', `payment_type` int(4) DEFAULT NULL COMMENT '支付类型,1-在线支付', `postage` int(10) DEFAULT NULL COMMENT '运费,单位是元', `status` int(10) DEFAULT NULL COMMENT '订单状态:0-已取消-10-未付款，20-已付款，40-已发货，50-交易成功，60-交易关闭', `payment_time` datetime DEFAULT NULL COMMENT '支付时间', `send_time` datetime DEFAULT NULL COMMENT '发货时间', `end_time` datetime DEFAULT NULL COMMENT '交易完成时间', `close_time` datetime DEFAULT NULL COMMENT '交易关闭时间', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`), UNIQUE KEY `order_no_index` (`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8 7.订单明细表order_item12345678910111213141516CREATE TABLE `mmall_order_item` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单子表id', `user_id` int(11) DEFAULT NULL, `order_no` bigint(20) DEFAULT NULL, `product_id` int(11) DEFAULT NULL COMMENT '商品id', `product_name` varchar(100) DEFAULT NULL COMMENT '商品名称', `product_image` varchar(500) DEFAULT NULL COMMENT '商品图片地址', `current_unit_price` decimal(20,2) DEFAULT NULL COMMENT '生成订单时的商品单价，单位是元,保留两位小数', `quantity` int(10) DEFAULT NULL COMMENT '商品数量', `total_price` decimal(20,2) DEFAULT NULL COMMENT '商品总价,单位是元,保留两位小数', `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `order_no_index` (`order_no`) USING BTREE, KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8 8.支付信息表pay_info1234567891011CREATE TABLE `mmall_pay_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT '用户id', `order_no` bigint(20) DEFAULT NULL COMMENT '订单号', `pay_platform` int(10) DEFAULT NULL COMMENT '支付平台:1-支付宝,2-微信', `platform_number` varchar(200) DEFAULT NULL COMMENT '支付宝支付流水号', `platform_status` varchar(20) DEFAULT NULL COMMENT '支付宝支付状态', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8 SQL导入利用Navicat导入sql文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226/* Navicat Premium Data Transfer Source Server : 182.92.82.103 Source Server Type : MySQL Source Server Version : 50173 Source Host : 182.92.82.103 Source Database : mmall Target Server Type : MySQL Target Server Version : 50173 File Encoding : utf-8 Date: 04/13/2017 22:04:18 PM*/SET NAMES utf8;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for `mmall_cart`-- ----------------------------DROP TABLE IF EXISTS `mmall_cart`;CREATE TABLE `mmall_cart` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `product_id` int(11) DEFAULT NULL COMMENT '商品id', `quantity` int(11) DEFAULT NULL COMMENT '数量', `checked` int(11) DEFAULT NULL COMMENT '是否选择,1=已勾选,0=未勾选', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`), KEY `user_id_index` (`user_id`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=146 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_cart`-- ----------------------------BEGIN;INSERT INTO `mmall_cart` VALUES ('126', '21', '26', '1', '1', '2017-04-13 21:27:06', '2017-04-13 21:27:06');COMMIT;-- ------------------------------ Table structure for `mmall_category`-- ----------------------------DROP TABLE IF EXISTS `mmall_category`;CREATE TABLE `mmall_category` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '类别Id', `parent_id` int(11) DEFAULT NULL COMMENT '父类别id当id=0时说明是根节点,一级类别', `name` varchar(50) DEFAULT NULL COMMENT '类别名称', `status` tinyint(1) DEFAULT '1' COMMENT '类别状态1-正常,2-已废弃', `sort_order` int(4) DEFAULT NULL COMMENT '排序编号,同类展示顺序,数值相等则自然排序', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=100032 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_category`-- ----------------------------BEGIN;INSERT INTO `mmall_category` VALUES ('100001', '0', '家用电器', '1', null, '2017-03-25 16:46:00', '2017-03-25 16:46:00'), ('100002', '0', '数码3C', '1', null, '2017-03-25 16:46:21', '2017-03-25 16:46:21'), ('100003', '0', '服装箱包', '1', null, '2017-03-25 16:49:53', '2017-03-25 16:49:53'), ('100004', '0', '食品生鲜', '1', null, '2017-03-25 16:50:19', '2017-03-25 16:50:19'), ('100005', '0', '酒水饮料', '1', null, '2017-03-25 16:50:29', '2017-03-25 16:50:29'), ('100006', '100001', '冰箱', '1', null, '2017-03-25 16:52:15', '2017-03-25 16:52:15'), ('100007', '100001', '电视', '1', null, '2017-03-25 16:52:26', '2017-03-25 16:52:26'), ('100008', '100001', '洗衣机', '1', null, '2017-03-25 16:52:39', '2017-03-25 16:52:39'), ('100009', '100001', '空调', '1', null, '2017-03-25 16:52:45', '2017-03-25 16:52:45'), ('100010', '100001', '电热水器', '1', null, '2017-03-25 16:52:54', '2017-03-25 16:52:54'), ('100011', '100002', '电脑', '1', null, '2017-03-25 16:53:18', '2017-03-25 16:53:18'), ('100012', '100002', '手机', '1', null, '2017-03-25 16:53:27', '2017-03-25 16:53:27'), ('100013', '100002', '平板电脑', '1', null, '2017-03-25 16:53:35', '2017-03-25 16:53:35'), ('100014', '100002', '数码相机', '1', null, '2017-03-25 16:53:56', '2017-03-25 16:53:56'), ('100015', '100002', '3C配件', '1', null, '2017-03-25 16:54:07', '2017-03-25 16:54:07'), ('100016', '100003', '女装', '1', null, '2017-03-25 16:54:44', '2017-03-25 16:54:44'), ('100017', '100003', '帽子', '1', null, '2017-03-25 16:54:51', '2017-03-25 16:54:51'), ('100018', '100003', '旅行箱', '1', null, '2017-03-25 16:55:02', '2017-03-25 16:55:02'), ('100019', '100003', '手提包', '1', null, '2017-03-25 16:55:09', '2017-03-25 16:55:09'), ('100020', '100003', '保暖内衣', '1', null, '2017-03-25 16:55:18', '2017-03-25 16:55:18'), ('100021', '100004', '零食', '1', null, '2017-03-25 16:55:30', '2017-03-25 16:55:30'), ('100022', '100004', '生鲜', '1', null, '2017-03-25 16:55:37', '2017-03-25 16:55:37'), ('100023', '100004', '半成品菜', '1', null, '2017-03-25 16:55:47', '2017-03-25 16:55:47'), ('100024', '100004', '速冻食品', '1', null, '2017-03-25 16:55:56', '2017-03-25 16:55:56'), ('100025', '100004', '进口食品', '1', null, '2017-03-25 16:56:06', '2017-03-25 16:56:06'), ('100026', '100005', '白酒', '1', null, '2017-03-25 16:56:22', '2017-03-25 16:56:22'), ('100027', '100005', '红酒', '1', null, '2017-03-25 16:56:30', '2017-03-25 16:56:30'), ('100028', '100005', '饮料', '1', null, '2017-03-25 16:56:37', '2017-03-25 16:56:37'), ('100029', '100005', '调制鸡尾酒', '1', null, '2017-03-25 16:56:45', '2017-03-25 16:56:45'), ('100030', '100005', '进口洋酒', '1', null, '2017-03-25 16:57:05', '2017-03-25 16:57:05');COMMIT;-- ------------------------------ Table structure for `mmall_order`-- ----------------------------DROP TABLE IF EXISTS `mmall_order`;CREATE TABLE `mmall_order` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单id', `order_no` bigint(20) DEFAULT NULL COMMENT '订单号', `user_id` int(11) DEFAULT NULL COMMENT '用户id', `shipping_id` int(11) DEFAULT NULL, `payment` decimal(20,2) DEFAULT NULL COMMENT '实际付款金额,单位是元,保留两位小数', `payment_type` int(4) DEFAULT NULL COMMENT '支付类型,1-在线支付', `postage` int(10) DEFAULT NULL COMMENT '运费,单位是元', `status` int(10) DEFAULT NULL COMMENT '订单状态:0-已取消-10-未付款，20-已付款，40-已发货，50-交易成功，60-交易关闭', `payment_time` datetime DEFAULT NULL COMMENT '支付时间', `send_time` datetime DEFAULT NULL COMMENT '发货时间', `end_time` datetime DEFAULT NULL COMMENT '交易完成时间', `close_time` datetime DEFAULT NULL COMMENT '交易关闭时间', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`), UNIQUE KEY `order_no_index` (`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_order`-- ----------------------------BEGIN;INSERT INTO `mmall_order` VALUES ('103', '1491753014256', '1', '25', '13998.00', '1', '0', '10', null, null, null, null, '2017-04-09 23:50:14', '2017-04-09 23:50:14'), ('104', '1491830695216', '1', '26', '13998.00', '1', '0', '10', null, null, null, null, '2017-04-10 21:24:55', '2017-04-10 21:24:55'), ('105', '1492089528889', '1', '29', '3299.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:18:48', '2017-04-13 21:18:48'), ('106', '1492090946105', '1', '29', '27894.00', '1', '0', '20', '2017-04-13 21:42:40', null, null, null, '2017-04-13 21:42:26', '2017-04-13 21:42:41'), ('107', '1492091003128', '1', '29', '8597.00', '1', '0', '20', '2017-04-13 21:43:38', null, null, null, '2017-04-13 21:43:23', '2017-04-13 21:43:38'), ('108', '1492091051313', '1', '29', '1999.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:11', '2017-04-13 21:44:11'), ('109', '1492091061513', '1', '29', '6598.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:21', '2017-04-13 21:44:21'), ('110', '1492091069563', '1', '29', '3299.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:29', '2017-04-13 21:44:29'), ('111', '1492091076073', '1', '29', '4299.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:36', '2017-04-13 21:44:36'), ('112', '1492091083720', '1', '29', '3299.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:43', '2017-04-13 21:44:43'), ('113', '1492091089794', '1', '29', '6999.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:49', '2017-04-13 21:44:49'), ('114', '1492091096400', '1', '29', '6598.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:44:56', '2017-04-13 21:44:56'), ('115', '1492091102371', '1', '29', '3299.00', '1', '0', '10', null, null, null, null, '2017-04-13 21:45:02', '2017-04-13 21:45:02'), ('116', '1492091110004', '1', '29', '8598.00', '1', '0', '40', '2017-04-13 21:55:16', '2017-04-13 21:55:31', null, null, '2017-04-13 21:45:09', '2017-04-13 21:55:31'), ('117', '1492091141269', '1', '29', '22894.00', '1', '0', '20', '2017-04-13 21:46:06', null, null, null, '2017-04-13 21:45:41', '2017-04-13 21:46:07');COMMIT;-- ------------------------------ Table structure for `mmall_order_item`-- ----------------------------DROP TABLE IF EXISTS `mmall_order_item`;CREATE TABLE `mmall_order_item` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单子表id', `user_id` int(11) DEFAULT NULL, `order_no` bigint(20) DEFAULT NULL, `product_id` int(11) DEFAULT NULL COMMENT '商品id', `product_name` varchar(100) DEFAULT NULL COMMENT '商品名称', `product_image` varchar(500) DEFAULT NULL COMMENT '商品图片地址', `current_unit_price` decimal(20,2) DEFAULT NULL COMMENT '生成订单时的商品单价，单位是元,保留两位小数', `quantity` int(10) DEFAULT NULL COMMENT '商品数量', `total_price` decimal(20,2) DEFAULT NULL COMMENT '商品总价,单位是元,保留两位小数', `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `order_no_index` (`order_no`) USING BTREE, KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_order_item`-- ----------------------------BEGIN;INSERT INTO `mmall_order_item` VALUES ('113', '1', '1491753014256', '26', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '6999.00', '2', '13998.00', '2017-04-09 23:50:14', '2017-04-09 23:50:14'), ('114', '1', '1491830695216', '26', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '6999.00', '2', '13998.00', '2017-04-10 21:24:55', '2017-04-10 21:24:55'), ('115', '1', '1492089528889', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:18:48', '2017-04-13 21:18:48'), ('116', '1', '1492090946105', '29', 'Haier/海尔HJ100-1HU1 10公斤滚筒洗衣机全自动带烘干家用大容量 洗烘一体', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg', '4299.00', '2', '8598.00', '2017-04-13 21:42:26', '2017-04-13 21:42:26'), ('117', '1', '1492090946105', '28', '4+64G送手环/Huawei/华为 nova 手机P9/P10plus青春', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg', '1999.00', '1', '1999.00', '2017-04-13 21:42:26', '2017-04-13 21:42:26'), ('118', '1', '1492090946105', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:42:26', '2017-04-13 21:42:26'), ('119', '1', '1492090946105', '26', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '6999.00', '2', '13998.00', '2017-04-13 21:42:26', '2017-04-13 21:42:26'), ('120', '1', '1492091003128', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '2', '6598.00', '2017-04-13 21:43:23', '2017-04-13 21:43:23'), ('121', '1', '1492091003128', '28', '4+64G送手环/Huawei/华为 nova 手机P9/P10plus青春', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg', '1999.00', '1', '1999.00', '2017-04-13 21:43:23', '2017-04-13 21:43:23'), ('122', '1', '1492091051313', '28', '4+64G送手环/Huawei/华为 nova 手机P9/P10plus青春', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg', '1999.00', '1', '1999.00', '2017-04-13 21:44:11', '2017-04-13 21:44:11'), ('123', '1', '1492091061513', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '2', '6598.00', '2017-04-13 21:44:21', '2017-04-13 21:44:21'), ('124', '1', '1492091069563', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:44:29', '2017-04-13 21:44:29'), ('125', '1', '1492091076073', '29', 'Haier/海尔HJ100-1HU1 10公斤滚筒洗衣机全自动带烘干家用大容量 洗烘一体', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg', '4299.00', '1', '4299.00', '2017-04-13 21:44:36', '2017-04-13 21:44:36'), ('126', '1', '1492091083720', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:44:43', '2017-04-13 21:44:43'), ('127', '1', '1492091089794', '26', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '6999.00', '1', '6999.00', '2017-04-13 21:44:49', '2017-04-13 21:44:49'), ('128', '1', '1492091096400', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '2', '6598.00', '2017-04-13 21:44:56', '2017-04-13 21:44:56'), ('129', '1', '1492091102371', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:45:02', '2017-04-13 21:45:02'), ('130', '1', '1492091110004', '29', 'Haier/海尔HJ100-1HU1 10公斤滚筒洗衣机全自动带烘干家用大容量 洗烘一体', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg', '4299.00', '2', '8598.00', '2017-04-13 21:45:09', '2017-04-13 21:45:09'), ('131', '1', '1492091141269', '26', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '6999.00', '1', '6999.00', '2017-04-13 21:45:41', '2017-04-13 21:45:41'), ('132', '1', '1492091141269', '27', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', '3299.00', '1', '3299.00', '2017-04-13 21:45:41', '2017-04-13 21:45:41'), ('133', '1', '1492091141269', '29', 'Haier/海尔HJ100-1HU1 10公斤滚筒洗衣机全自动带烘干家用大容量 洗烘一体', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg', '4299.00', '2', '8598.00', '2017-04-13 21:45:41', '2017-04-13 21:45:41'), ('134', '1', '1492091141269', '28', '4+64G送手环/Huawei/华为 nova 手机P9/P10plus青春', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg', '1999.00', '2', '3998.00', '2017-04-13 21:45:41', '2017-04-13 21:45:41');COMMIT;-- ------------------------------ Table structure for `mmall_pay_info`-- ----------------------------DROP TABLE IF EXISTS `mmall_pay_info`;CREATE TABLE `mmall_pay_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT '用户id', `order_no` bigint(20) DEFAULT NULL COMMENT '订单号', `pay_platform` int(10) DEFAULT NULL COMMENT '支付平台:1-支付宝,2-微信', `platform_number` varchar(200) DEFAULT NULL COMMENT '支付宝支付流水号', `platform_status` varchar(20) DEFAULT NULL COMMENT '支付宝支付状态', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_pay_info`-- ----------------------------BEGIN;INSERT INTO `mmall_pay_info` VALUES ('53', '1', '1492090946105', '1', '2017041321001004300200116250', 'WAIT_BUYER_PAY', '2017-04-13 21:42:33', '2017-04-13 21:42:33'), ('54', '1', '1492090946105', '1', '2017041321001004300200116250', 'TRADE_SUCCESS', '2017-04-13 21:42:41', '2017-04-13 21:42:41'), ('55', '1', '1492091003128', '1', '2017041321001004300200116251', 'WAIT_BUYER_PAY', '2017-04-13 21:43:31', '2017-04-13 21:43:31'), ('56', '1', '1492091003128', '1', '2017041321001004300200116251', 'TRADE_SUCCESS', '2017-04-13 21:43:38', '2017-04-13 21:43:38'), ('57', '1', '1492091141269', '1', '2017041321001004300200116252', 'WAIT_BUYER_PAY', '2017-04-13 21:45:59', '2017-04-13 21:45:59'), ('58', '1', '1492091141269', '1', '2017041321001004300200116252', 'TRADE_SUCCESS', '2017-04-13 21:46:07', '2017-04-13 21:46:07'), ('59', '1', '1492091110004', '1', '2017041321001004300200116396', 'WAIT_BUYER_PAY', '2017-04-13 21:55:08', '2017-04-13 21:55:08'), ('60', '1', '1492091110004', '1', '2017041321001004300200116396', 'TRADE_SUCCESS', '2017-04-13 21:55:17', '2017-04-13 21:55:17');COMMIT;-- ------------------------------ Table structure for `mmall_product`-- ----------------------------DROP TABLE IF EXISTS `mmall_product`;CREATE TABLE `mmall_product` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商品id', `category_id` int(11) NOT NULL COMMENT '分类id,对应mmall_category表的主键', `name` varchar(100) NOT NULL COMMENT '商品名称', `subtitle` varchar(200) DEFAULT NULL COMMENT '商品副标题', `main_image` varchar(500) DEFAULT NULL COMMENT '产品主图,url相对地址', `sub_images` text COMMENT '图片地址,json格式,扩展用', `detail` text COMMENT '商品详情', `price` decimal(20,2) NOT NULL COMMENT '价格,单位-元保留两位小数', `stock` int(11) NOT NULL COMMENT '库存数量', `status` int(6) DEFAULT '1' COMMENT '商品状态.1-在售 2-下架 3-删除', `create_time` datetime DEFAULT NULL COMMENT '创建时间', `update_time` datetime DEFAULT NULL COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_product`-- ----------------------------BEGIN;INSERT INTO `mmall_product` VALUES ('26', '100002', 'Apple iPhone 7 Plus (A1661) 128G 玫瑰金色 移动联通电信4G手机', 'iPhone 7，现更以红色呈现。', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', '241997c4-9e62-4824-b7f0-7425c3c28917.jpeg,b6c56eb0-1748-49a9-98dc-bcc4b9788a54.jpeg,92f17532-1527-4563-aa1d-ed01baa0f7b2.jpeg,3adbe4f7-e374-4533-aa79-cc4a98c529bf.jpeg', '&lt;p&gt;&lt;img alt=\\\"10000.jpg\\\" src=\\\"http://img.happymmall.com/00bce8d4-e9af-4c8d-b205-e6c75c7e252b.jpg\\\" width=\\\"790\\\" height=\\\"553\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"20000.jpg\\\" src=\\\"http://img.happymmall.com/4a70b4b4-01ee-46af-9468-31e67d0995b8.jpg\\\" width=\\\"790\\\" height=\\\"525\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"30000.jpg\\\" src=\\\"http://img.happymmall.com/0570e033-12d7-49b2-88f3-7a5d84157223.jpg\\\" width=\\\"790\\\" height=\\\"365\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"40000.jpg\\\" src=\\\"http://img.happymmall.com/50515c02-3255-44b9-a829-9e141a28c08a.jpg\\\" width=\\\"790\\\" height=\\\"525\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"50000.jpg\\\" src=\\\"http://img.happymmall.com/c138fc56-5843-4287-a029-91cf3732d034.jpg\\\" width=\\\"790\\\" height=\\\"525\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"60000.jpg\\\" src=\\\"http://img.happymmall.com/c92d1f8a-9827-453f-9d37-b10a3287e894.jpg\\\" width=\\\"790\\\" height=\\\"525\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"TB24p51hgFkpuFjSspnXXb4qFXa-1776456424.jpg\\\" src=\\\"http://img.happymmall.com/bb1511fc-3483-471f-80e5-c7c81fa5e1dd.jpg\\\" width=\\\"790\\\" height=\\\"375\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"shouhou.jpg\\\" src=\\\"http://img.happymmall.com/698e6fbe-97ea-478b-8170-008ad24030f7.jpg\\\" width=\\\"750\\\" height=\\\"150\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"999.jpg\\\" src=\\\"http://img.happymmall.com/ee276fe6-5d79-45aa-8393-ba1d210f9c89.jpg\\\" width=\\\"790\\\" height=\\\"351\\\"&gt;&lt;br&gt;&lt;/p&gt;', '6999.00', '9991', '1', null, '2017-04-13 21:45:41'), ('27', '100006', 'Midea/美的 BCD-535WKZM(E)冰箱双开门对开门风冷无霜智能电家用', '送品牌烤箱，五一大促', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg', 'ac3e571d-13ce-4fad-89e8-c92c2eccf536.jpeg,4bb02f1c-62d5-48cc-b358-97b05af5740d.jpeg,36bdb49c-72ae-4185-9297-78829b54b566.jpeg', '&lt;p&gt;&lt;img alt=\\\"miaoshu.jpg\\\" src=\\\"http://img.happymmall.com/9c5c74e6-6615-4aa0-b1fc-c17a1eff6027.jpg\\\" width=\\\"790\\\" height=\\\"444\\\"&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=\\\"miaoshu2.jpg\\\" src=\\\"http://img.happymmall.com/31dc1a94-f354-48b8-a170-1a1a6de8751b.jpg\\\" width=\\\"790\\\" height=\\\"1441\\\"&gt;&lt;img alt=\\\"miaoshu3.jpg\\\" src=\\\"http://img.happymmall.com/7862594b-3063-4b52-b7d4-cea980c604e0.jpg\\\" width=\\\"790\\\" height=\\\"1442\\\"&gt;&lt;img alt=\\\"miaoshu4.jpg\\\" src=\\\"http://img.happymmall.com/9a650563-dc85-44d6-b174-d6960cfb1d6a.jpg\\\" width=\\\"790\\\" height=\\\"1441\\\"&gt;&lt;br&gt;&lt;/p&gt;', '3299.00', '8876', '1', '2017-04-13 18:51:54', '2017-04-13 21:45:41'), ('28', '100012', '4+64G送手环/Huawei/华为 nova 手机P9/P10plus青春', 'NOVA青春版1999元', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg', '0093f5d3-bdb4-4fb0-bec5-5465dfd26363.jpeg,13da2172-4445-4eb5-a13f-c5d4ede8458c.jpeg,58d5d4b7-58d4-4948-81b6-2bae4f79bf02.jpeg', '&lt;p&gt;&lt;img alt=\\\"11TB2fKK3cl0kpuFjSsziXXa.oVXa_!!1777180618.jpg\\\" src=\\\"http://img.happymmall.com/5c2d1c6d-9e09-48ce-bbdb-e833b42ff664.jpg\\\" width=\\\"790\\\" height=\\\"966\\\"&gt;&lt;img alt=\\\"22TB2YP3AkEhnpuFjSZFpXXcpuXXa_!!1777180618.jpg\\\" src=\\\"http://img.happymmall.com/9a10b877-818f-4a27-b6f7-62887f3fb39d.jpg\\\" width=\\\"790\\\" height=\\\"1344\\\"&gt;&lt;img alt=\\\"33TB2Yyshk.hnpuFjSZFpXXcpuXXa_!!1777180618.jpg\\\" src=\\\"http://img.happymmall.com/7d7fbd69-a3cb-4efe-8765-423bf8276e3e.jpg\\\" width=\\\"790\\\" height=\\\"700\\\"&gt;&lt;img alt=\\\"TB2diyziB8kpuFjSspeXXc7IpXa_!!1777180618.jpg\\\" src=\\\"http://img.happymmall.com/1d7160d2-9dba-422f-b2a0-e92847ba6ce9.jpg\\\" width=\\\"790\\\" height=\\\"393\\\"&gt;&lt;br&gt;&lt;/p&gt;', '1999.00', '9994', '1', '2017-04-13 18:57:18', '2017-04-13 21:45:41'), ('29', '100008', 'Haier/海尔HJ100-1HU1 10公斤滚筒洗衣机全自动带烘干家用大容量 洗烘一体', '门店机型 德邦送货', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg', '173335a4-5dce-4afd-9f18-a10623724c4e.jpeg,42b1b8bc-27c7-4ee1-80ab-753d216a1d49.jpeg,2f1b3de1-1eb1-4c18-8ca2-518934931bec.jpeg', '&lt;p&gt;&lt;img alt=\\\"1TB2WLZrcIaK.eBjSspjXXXL.XXa_!!2114960396.jpg\\\" src=\\\"http://img.happymmall.com/ffcce953-81bd-463c-acd1-d690b263d6df.jpg\\\" width=\\\"790\\\" height=\\\"920\\\"&gt;&lt;img alt=\\\"2TB2zhOFbZCO.eBjSZFzXXaRiVXa_!!2114960396.jpg\\\" src=\\\"http://img.happymmall.com/58a7bd25-c3e7-4248-9dba-158ef2a90e70.jpg\\\" width=\\\"790\\\" height=\\\"1052\\\"&gt;&lt;img alt=\\\"3TB27mCtb7WM.eBjSZFhXXbdWpXa_!!2114960396.jpg\\\" src=\\\"http://img.happymmall.com/2edbe9b3-28be-4a8b-a9c3-82e40703f22f.jpg\\\" width=\\\"790\\\" height=\\\"820\\\"&gt;&lt;br&gt;&lt;/p&gt;', '4299.00', '9993', '1', '2017-04-13 19:07:47', '2017-04-13 21:45:41');COMMIT;-- ------------------------------ Table structure for `mmall_shipping`-- ----------------------------DROP TABLE IF EXISTS `mmall_shipping`;CREATE TABLE `mmall_shipping` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT '用户id', `receiver_name` varchar(20) DEFAULT NULL COMMENT '收货姓名', `receiver_phone` varchar(20) DEFAULT NULL COMMENT '收货固定电话', `receiver_mobile` varchar(20) DEFAULT NULL COMMENT '收货移动电话', `receiver_province` varchar(20) DEFAULT NULL COMMENT '省份', `receiver_city` varchar(20) DEFAULT NULL COMMENT '城市', `receiver_district` varchar(20) DEFAULT NULL COMMENT '区/县', `receiver_address` varchar(200) DEFAULT NULL COMMENT '详细地址', `receiver_zip` varchar(6) DEFAULT NULL COMMENT '邮编', `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_shipping`-- ----------------------------BEGIN;INSERT INTO `mmall_shipping` VALUES ('4', '13', 'geely', '010', '18688888888', '北京', '北京市', '海淀区', '中关村', '100000', '2017-01-22 14:26:25', '2017-01-22 14:26:25'), ('7', '17', 'Rosen', '13800138000', '13800138000', '北京', '北京', null, '中关村', '100000', '2017-03-29 12:11:01', '2017-03-29 12:11:01'), ('29', '1', '吉利', '13800138000', '13800138000', '北京', '北京', '海淀区', '海淀区中关村', '100000', '2017-04-09 18:33:32', '2017-04-09 18:33:32');COMMIT;-- ------------------------------ Table structure for `mmall_user`-- ----------------------------DROP TABLE IF EXISTS `mmall_user`;CREATE TABLE `mmall_user` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户表id', `username` varchar(50) NOT NULL COMMENT '用户名', `password` varchar(50) NOT NULL COMMENT '用户密码，MD5加密', `email` varchar(50) DEFAULT NULL, `phone` varchar(20) DEFAULT NULL, `question` varchar(100) DEFAULT NULL COMMENT '找回密码问题', `answer` varchar(100) DEFAULT NULL COMMENT '找回密码答案', `role` int(4) NOT NULL COMMENT '角色0-管理员,1-普通用户', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '最后一次更新时间', PRIMARY KEY (`id`), UNIQUE KEY `user_name_unique` (`username`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;-- ------------------------------ Records of `mmall_user`-- ----------------------------BEGIN;INSERT INTO `mmall_user` VALUES ('1', 'admin', '427338237BD929443EC5D48E24FD2B1A', 'admin@happymmall.com', '13800138000', '问题', '答案', '1', '2016-11-06 16:56:45', '2017-04-04 19:27:36'), ('13', 'geely', '08E9A6EA287E70E7E3F7C982BF7923AC', 'geely@happymmall.com', '13800138000', '问题', '答案', '0', '2016-11-19 22:19:25', '2016-11-19 22:19:25'), ('17', 'rosen', '095AC193FE2212EEC7A93E8FEFF11902', 'rosen1@happymmall.com', '13800138000', '问题', '答案', '0', '2017-03-17 10:51:33', '2017-04-09 23:13:26'), ('21', 'soonerbetter', 'DE6D76FE7C40D5A1A8F04213F2BEFBEE', 'test06@happymmall.com', '13800138000', '105204', '105204', '0', '2017-04-13 21:26:22', '2017-04-13 21:26:22');COMMIT;SET FOREIGN_KEY_CHECKS = 1;","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"电商实战(六)---项目初始化一","slug":"电商实战-六-项目初始化","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-六-项目初始化.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-六-项目初始化.html","excerpt":"","text":"IDEA创建Maven项目 初始化git上面我们创建一个Maven项目之后接下来初始化git:1.创建README.md文件,在IDEA下打开终端输入:12shizhengyangdeMacBook-Pro:mmall panyuanyuan$ touch README.md-- 输入说明 2.创建.gitignore文件12345678910111213141516171819202122232425262728293031323334353637shizhengyangdeMacBook-Pro:mmall panyuanyuan$ touch .gitignore-- 内容如下*.class# package file*.war*.ear# kdiff3 ignore*.orig#maven ignoertarget/# eclipse ignore.settings/.project.classpath# idea ignore.idea//idea/*.ipr*.iml*.iws# temp ignore*.log*.cache*.diff*.patch*.tmp# system ignore.DS_StoreThumbs.db 3.初始化git项目12shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git initInitialized empty Git repository in /Users/panyuanyuan/java/note/code_project/new/mmall/.git/ 4.提交项目1234567891011121314-- 添加项目shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git add .-- 提交到本地shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git commit -am 'first init project'-- 添加远端仓库(保证远端有本地的公钥)shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git remote add origin git@git.oschina.net:jose_uncle/mmall_learning.git-- 拉取代码git pull-- 提交到远端服务器shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git push -u -f origin master 5.查看是否推送成功6.查看本地分支和远程分支12shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git branch* master 7.查看远端分支12shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git branch -r origin/master 8.创建分支并切换分支12345678910111213141516-- 创建分支并切换shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git checkout -b v1.0 origin/masterBranch v1.0 set up to track remote branch master from origin.Switched to a new branch 'v1.0'-- 查看当前分支shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git branch master* v1.0-- 将当前分支推送到服务器shizhengyangdeMacBook-Pro:mmall panyuanyuan$ git push origin HEAD -uTotal 0 (delta 0), reused 0 (delta 0)To git.oschina.net:jose_uncle/mmall_learning.git * [new branch] HEAD -&gt; v1.0Branch v1.0 set up to track remote branch v1.0 from origin. 修改POM文件lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com&lt;/groupId&gt; &lt;artifactId&gt;mmall&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;mmall Maven Webapp&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;maven.compiler.encoding&gt;UTF-8&lt;/maven.compiler.encoding&gt; &lt;org.springframework.version&gt;4.0.0.RELEASE&lt;/org.springframework.version&gt; &lt;org.mybatis.version&gt;3.4.1&lt;/org.mybatis.version&gt; &lt;org.mybatis.spring.version&gt;1.3.0&lt;/org.mybatis.spring.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt; &lt;version&gt;7.0.64&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.7.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;org.mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;org.mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt; &lt;version&gt;1.6.11&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt; &lt;version&gt;1.9.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.4&lt;/version&gt; &lt;!--&lt;scope&gt;runtime&lt;/scope&gt;--&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;20.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;joda-time&lt;/groupId&gt; &lt;artifactId&gt;joda-time&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- id加密解密 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.hashids&lt;/groupId&gt; &lt;artifactId&gt;hashids&lt;/artifactId&gt; &lt;version&gt;1.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- ftpclient --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-net&lt;/groupId&gt; &lt;artifactId&gt;commons-net&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- file upload --&gt; &lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mybatis pager --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;4.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;0.9.4&lt;/version&gt; &lt;/dependency&gt; &lt;!-- alipay --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-configuration&lt;/groupId&gt; &lt;artifactId&gt;commons-configuration&lt;/artifactId&gt; &lt;version&gt;1.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.zxing&lt;/groupId&gt; &lt;artifactId&gt;core&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hamcrest&lt;/groupId&gt; &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt; &lt;version&gt;1.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;mmall&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- geelynote maven的核心插件之-complier插件默认只支持编译Java 1.4，因此需要加上支持高版本jre的配置，在pom.xml里面加上 增加编译插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;compilerArguments&gt; &lt;extdirs&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib&lt;/extdirs&gt; &lt;/compilerArguments&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配置Mybatis的generator自动生成器1.在resource资源文件夹路径下创建datasource.properties,内容如下:12345db.driverLocation=/Users/panyuanyuan/java/note/code_project/new/mysql-connector-java-5.1.6-bin.jardb.driverClassName=com.mysql.jdbc.Driverdb.url=jdbc:mysql://10.211.55.3:3306/mmall_learning?characterEncoding=utf-8db.username=panyuanyuandb.password=xxx 2.在resource资源文件夹路径下创建generatorConfig.xml文件,配置如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;&lt;generatorConfiguration&gt; &lt;!--导入属性配置--&gt; &lt;properties resource=\"datasource.properties\"&gt;&lt;/properties&gt; &lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt; &lt;classPathEntry location=\"$&#123;db.driverLocation&#125;\"/&gt; &lt;context id=\"default\" targetRuntime=\"MyBatis3\"&gt; &lt;!-- optional，旨在创建class时，对注释进行控制 --&gt; &lt;commentGenerator&gt; &lt;property name=\"suppressDate\" value=\"true\"/&gt; &lt;property name=\"suppressAllComments\" value=\"true\"/&gt; &lt;/commentGenerator&gt; &lt;!--jdbc的数据库连接 --&gt; &lt;jdbcConnection driverClass=\"$&#123;db.driverClassName&#125;\" connectionURL=\"$&#123;db.url&#125;\" userId=\"$&#123;db.username&#125;\" password=\"$&#123;db.password&#125;\"&gt; &lt;/jdbcConnection&gt; &lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt; &lt;javaTypeResolver&gt; &lt;property name=\"forceBigDecimals\" value=\"false\"/&gt; &lt;/javaTypeResolver&gt; &lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 targetPackage 指定生成的model生成所在的包名 targetProject 指定在该项目下所在的路径 --&gt; &lt;!--&lt;javaModelGenerator targetPackage=\"com.mmall.pojo\" targetProject=\".\\src\\main\\java\"&gt;--&gt; &lt;javaModelGenerator targetPackage=\"com.mmall.pojo\" targetProject=\"./src/main/java\"&gt; &lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt; &lt;property name=\"enableSubPackages\" value=\"false\"/&gt; &lt;!-- 是否对model添加 构造函数 --&gt; &lt;property name=\"constructorBased\" value=\"true\"/&gt; &lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt; &lt;property name=\"trimStrings\" value=\"true\"/&gt; &lt;!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 --&gt; &lt;property name=\"immutable\" value=\"false\"/&gt; &lt;/javaModelGenerator&gt; &lt;!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt; &lt;!--&lt;sqlMapGenerator targetPackage=\"mappers\" targetProject=\".\\src\\main\\resources\"&gt;--&gt; &lt;sqlMapGenerator targetPackage=\"mappers\" targetProject=\"./src/main/resources\"&gt; &lt;property name=\"enableSubPackages\" value=\"false\"/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码 type=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象 type=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象 type=\"XMLMAPPER\",生成SQLMap XML文件和独立的Mapper接口 --&gt; &lt;!-- targetPackage：mapper接口dao生成的位置 --&gt; &lt;!--&lt;javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.mmall.dao\" targetProject=\".\\src\\main\\java\"&gt;--&gt; &lt;javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.mmall.dao\" targetProject=\"./src/main/java\"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=\"enableSubPackages\" value=\"false\" /&gt; &lt;/javaClientGenerator&gt; &lt;table tableName=\"mmall_shipping\" domainObjectName=\"Shipping\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_cart\" domainObjectName=\"Cart\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_cart_item\" domainObjectName=\"CartItem\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_category\" domainObjectName=\"Category\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_order\" domainObjectName=\"Order\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_order_item\" domainObjectName=\"OrderItem\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_pay_info\" domainObjectName=\"PayInfo\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;table tableName=\"mmall_product\" domainObjectName=\"Product\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt; &lt;columnOverride column=\"detail\" jdbcType=\"VARCHAR\" /&gt; &lt;columnOverride column=\"sub_images\" jdbcType=\"VARCHAR\" /&gt; &lt;/table&gt; &lt;table tableName=\"mmall_user\" domainObjectName=\"User\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt; &lt;!-- geelynote mybatis插件的搭建 --&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 运行插件自动生成代码 下载安装mybatis plugins作用:dao接口和mapper的快捷跳转1.找到安装的所在路径12shizhengyangdeMacBook-Pro% find ~ -name \"mybatis_plus.jar\"/Users/panyuanyuan/Library/Application Support/IntelliJIdea2017.1/mybatis_plus/lib/mybatis_plus.jar 2.进入到路径1cd /Users/XXXXX/Library/Application Support/IntelliJIdea15/mybatis_plus/lib 3.开始破解1234567891011121314151617-- 破解包地址,我们只需要替换com文件即可https://github.com/myoss/profile/tree/master/idea/plugin/MybatisPlugin-- 创建一个文件夹mkdir m-- 进去 cd m-- 拷贝到m文件夹中 cp ../mybatis_plus.jar .-- 解压jar包jar xf mybatis_plus.jar -- 复制com文件夹到这里 路径根据你情况而定，版本号也根据你情况而定cp -r ~/Workspace/github/mybatis_plus/idea/plugin/MybatisPlugin/v2.7\\~v2.83/com .-- 重新打为jar包jar cf mybatis_plus.jar *-- 复制到m的上层目录cp mybatis_plus.jar ../","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"电商实战(四)---环境配置之Mysql|Git","slug":"电商实战-四-环境配置之Mysql-Git","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-四-环境配置之Mysql-Git.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-四-环境配置之Mysql-Git.html","excerpt":"","text":"Mysql的安装下载安装Mysql1.打开终端输入— 默认版本5.1.731[root@centos-linux developer]# sudo yum -y install mysql-server 2.配置mysql的默认编码123456-- 编辑/etc/my.cnf文件[root@centos-linux etc]# sudo vim /etc/my.cnf-- 在symbolic-links=0下面添加如下的配置symbolic-links=0default-character-set = utf8 -- 配置项 3.设置mysql随系统自动启动并查看1234[root@centos-linux etc]# sudo chkconfig mysqld on-- 2-5都是on状态表示会随机器启动[root@centos-linux etc]# sudo chkconfig --list mysqldmysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off 4.启动mysql服务1[root@centos-linux etc]# sudo service mysqld start 5.登录查看12345678910111213141516171819202122232425262728293031-- 第一次使用非密码登录[root@centos-linux etc]# mysql -u root-- 查看授权用户mysql&gt; select user,host from mysql.user;+------+---------------------+| user | host |+------+---------------------+| root | 127.0.0.1 || | centos-linux.shared || root | centos-linux.shared || | localhost || root | localhost |+------+---------------------+-- 删除匿名用户mysql&gt; delete from mysql.user where user='';Query OK, 2 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;+------+---------------------+| user | host |+------+---------------------+| root | 127.0.0.1 || root | centos-linux.shared || root | localhost |+------+---------------------+3 rows in set (0.00 sec)-- 退出mysqlmysql&gt; exit 6.配置防火墙这里同时把Nginx和Tomcat的端口也进行了配置,配置项如下:123456789101112[root@centos-linux etc]# sudo vim /etc/sysconfig/iptables#nginx tomcat-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT#mysql-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT-- 重启防火墙[root@centos-linux etc]# sudo service iptables restartiptables: Applying firewall rules: [ OK ] 7.设置账号12345678910111213141516-- 登录mysql[root@centos-linux etc]# mysql -u rootmysql&gt; insert into mysql.user(Host,User,Password) values(\"localhost\",\"panyuanyuan\",password(\"123\"));Query OK, 1 row affected, 3 warnings (0.01 sec)-- 查看用户表mysql&gt; select user,host from mysql.user;+-------------+---------------------+| user | host |+-------------+---------------------+| root | 127.0.0.1 || root | centos-linux.shared || panyuanyuan | localhost || root | localhost |+-------------+---------------------+4 rows in set (0.00 sec) 8.创建一个数据库并设置权限12345678910mysql&gt; create database `mmall` default character set utf8 collate utf8_general_ci;Query OK, 1 row affected (0.00 sec)-- 给数据库设置权限mysql&gt; grant select,delete,create on mmal.* to panyuanyuan@'%' identified by '123' with grant option;Query OK, 0 rows affected (0.00 sec)-- 设置密码mysql&gt; set password for root@localhost=password('123');Query OK, 0 rows affected (0.00 sec) 9.链接测试,用本机的Navicat链接CentOS的数据库链接 安装总结至此我们安装配置mysql完毕,接下来安装git Git的安装的安装与配置1.下载GIT,本次采用的下载地址是http://learning.happymmall.com/git/git-v2.8.0.tar.gz1[root@centos-linux developer]# wget http://learning.happymmall.com/git/git-v2.8.0.tar.gz 2.安装git的依赖包12345678yum install curlyum install curl-develyum install zlib-develyum install openssl-develyum install perlyum install cpioyum install expat-develyum install gettext-devel 3.解压git安装包1[root@centos-linux developer]# tar -zxvf git-v2.8.0.tar.gz 4.安装git123456789101112-- 进入到git的解压目录[root@centos-linux git-2.8.0]# cd git-2.8.0/-- 编译git[root@centos-linux git-2.8.0]# sudo make prefix=/usr/local/ all-- 安装git[root@centos-linux git-2.8.0]# sudo make prefix=/usr/local/ install-- 验证git的版本[root@centos-linux git-2.8.0]# git --versiongit version 2.8.0 5.配置GIT12345678910111213141516171819202122232425-- 输入以下命令一路回车生成ssh key[root@centos-linux git_down]# ssh-keygen -t rsa -C \"panyuanyuan1024@163.com\"Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:43:a7:76:72:ce:58:8a:ca:cc:cb:0c:19:ae:3b:3c:71 panyuanyuan1024@163.comThe key's randomart image is:-- 将私钥告诉本地系统[root@centos-linux git_down]# ssh-add ~/.ssh/id_rsaCould not open a connection to your authentication agent.-- 解决以上出现的问题[root@centos-linux git_down]# eval `ssh-agent`Agent pid 15193-- 再次输入以下命令,问题解决[root@centos-linux git_down]# ssh-add ~/.ssh/id_rsaIdentity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)-- 输入以下命令复制公钥[root@centos-linux git_down]# cat ~/.ssh/id_rsa.pub 6.将公钥配置到马云上面7.测试git配置此时我们就可以验证git的配置是否成功,如果克隆项目成功表示我们的配置没有问题1[root@centos-linux learning]# git clone git@git.oschina.net:jose_uncle/learning.git","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"电商实战(三)---环境配置之NGINX","slug":"电商实战-三-环境配置之NGIX","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-三-环境配置之NGIX.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-三-环境配置之NGIX.html","excerpt":"","text":"NGINX简介与安装NGINX是什么Ngix是一个轻量级的WEB服务器,也是一个反向代理服务器,是俄罗斯人开发的. NGINX安装1.首先安装Nginx环境依赖gcc.打开终端查看机器是否已经安装gcc12[root@centos-linux ~]# gcc -vgcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) 如果没有安装的话,执行下面命令进行安装:1yum install gcc 2.安装Nginx的依赖pcre1[root@centos-linux ~]# sudo yum install pcre pcre-devel 3.安装Nginx的依赖zlib1[root@centos-linux ~]# sudo yum install zlib zlib-devel 4.安装Nginx的依赖openssl1[root@centos-linux ~]# sudo yum install openssl openssl-devel 5.下载Nginx,这里采用的地址是:http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz1234[root@centos-linux developer]# wget http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz-- 下载完成之后解压(这里的下载路径是/developer)[root@centos-linux developer]# tar -zxvf linux-nginx-1.10.2.tar.gz 6.配置文件的检查和编译安装12345678910-- 进入到解压后的Nginx文件目录进行文件检查[root@centos-linux nginx-1.10.2]# sudo ./configure-- 检查完成之后输入sudo make命令进行编译[root@centos-linux nginx-1.10.2]# sudo make-- 编译完成之后进行安装[root@centos-linux nginx-1.10.2]# sudo make install-- 安装完成之后查看安装的目录[root@centos-linux nginx-1.10.2]# whereis nginxnginx: /usr/local/nginx 7.启动Nginx123456789101112131415161718-- 进入到Nginx的安装目录下面的/sbin目录[root@centos-linux nginx-1.10.2]# cd /usr/local/nginx/[root@centos-linux nginx]# lltotal 16drwxr-xr-x. 2 root root 4096 Jun 10 15:12 confdrwxr-xr-x. 2 root root 4096 Jun 10 15:12 htmldrwxr-xr-x. 2 root root 4096 Jun 10 15:12 logsdrwxr-xr-x. 2 root root 4096 Jun 10 15:12 sbin[root@centos-linux nginx]# cd sbin/-- 启动Nginx[root@centos-linux sbin]# ./nginx-- 查看Nginx所运行的进程[root@centos-linux sbin]# ps aux| grep nginx root 17481 0.0 0.0 23968 824 ? Ss 15:16 0:00 nginx: master process ./nginxnobody 17482 0.0 0.1 24388 1404 ? S 15:16 0:00 nginx: worker processroot 17605 0.0 0.0 103312 880 pts/2 S+ 15:16 0:00 grep nginx 8.安装验证,因为Nginx默认是80端口,所以这里关闭防火墙直接访问ip即可 NGINX配置NGINX配置服务转发1.进入到Nginx的安装目录的conf目录下,并创建vhost文件夹(方便管理)1[root@centos-linux ~]# cd /usr/local/nginx/conf/ 2.编辑nginx.conf文件添加如下配置12345[root@centos-linux conf]# vim nginx.conf-- 添加如下配置,在HHTPS的上面配置include vhost/*.conf;# HTTPS server 3.如果没有外网只在本机器局域网访问的话配置本机的host文件(不是linux)123shizhengyangdeMacBook-Pro% sudo vim hosts-- 添加如下的配置,将本机的ip和域名进行绑定10.211.55.3 www.learning.com 4.在nignx安装目录下的conf目录下创建vhost目录,并创建域名.conf进行配置12345678910111213141516[root@centos-linux sbin]# cd /usr/local/nginx/conf/vhost/[root@centos-linux vhost]# vim www.learning.com.confserver &#123; listen 80; autoindex on; server_name www.learning.com; access_log /usr/local/nginx/logs/access.log combined; index index.html index.htm index.jsp index.php; if ( $query_string ~* \".*[\\;'\\&lt;\\&gt;].*\" )&#123; return 404; &#125; location / &#123; proxy_pass http://127.0.0.1:8080; add_header Access-Control-Allow-Origin *; &#125;&#125; 5.配置完成之后重启Nginx服务器123-- 进入到Nginx的安装目录下的sbin下执行命令[root@centos-linux vhost]#/usr/local/nginx/sbin[root@centos-linux sbin]# ./nginx -s reload -- 重启Nginx 6.启动测试打开本机浏览器(修改hosts文件的机器)访问www.learning.com,发下已经被转发 NGINX配置目录转发1.因为在本机局域网环境测试,所以这里要配置本机的hosts文件(不是linux)1210.211.55.3 www.learning.com10.211.55.3 www.learning.image.com -- 新添加的图片的地址 2.配置linux的Nginx反向代理配置12345678910111213141516171819-- 找到nginx安装目录下的conf下的vhost文件夹[root@centos-linux sbin]# cd /usr/local/nginx/conf/vhost/-- 创建文件[root@centos-linux sbin]#vim www.learning.image.com.conf-- 编辑www.learning.image.com.conf文件server &#123; listen 80; autoindex off; server_name www.learning.image.com; access_log /usr/local/nginx/logs/access.log combined; index index.html index.htm index.jsp index.php; if ( $query_string ~* \".*[\\;'\\&lt;\\&gt;].*\" )&#123; return 404; &#125; location / &#123; root /ftpfile/image/; -- 路径指向FTP文件下的image文件夹 add_header Access-Control-Allow-Origin *; &#125;&#125; 3.在FTP的文件夹下创建image文件夹,并上传图片1.jpg4.重启Nginx服务器12[root@centos-linux sbin]# cd /usr/local/nginx/sbin[root@centos-linux sbin]# ./nginx -s reload 5.访问测试,在本机(修改hosts文件的机器)访问www.learning.image.com/1.jpg到这里Nginx的安装和配置已经完成,并且与之前的vsftpd服务器已经形成了一个文件服务器,接下来下一章节我们安装Mysql和git","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"电商实战(二)---环境配置之VSFTP","slug":"电商实战-二-环境配置","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-二-环境配置.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-二-环境配置.html","excerpt":"","text":"#电商实战(二)—环境配置之VSFTP由于环境配置比较多也比较繁杂,这里讲环境的配置分成两节进行记录,这样使得学习起来更有规律可循. 安装VSFTPD下载安装VSFTP服务器什么是vsftpd?vsftpd 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。vsftpd 是一个 UNIX 类操作系统上运行的服务器的名字，它可以运行在诸如 Linux、BSD、Solaris、 HP-UNIX等系统上面，是一个完全免费的、开放源代码的ftp服务器软件，支持很多其他的 FTP 服务器所不支持的特征。比如：非常高的安全性需求、带宽限制、良好的可伸缩性、可创建虚拟用户、支持IPv6、速率高等 打开终端输入以下命令进行安装vsftpd服务器:1[root@centos-linux bin]# sudo yum -y install vsftpd 配置VSFTP服务器—前奏1.在根目录下创建ftp文件夹,将来ftp上传的时候就会上传到这里:12[root@centos-linux bin]# cd /[root@centos-linux /]# mkdir ftpfile 2.创建一个ftp用户12345[root@centos-linux /]# sudo useradd ftpuser -d /ftpfile/ -s /sbin/nologin useradd: warning: the home directory already exists.Not copying any file from skel directory into it.-- -d /ftpfile/指定用户主目录为/ftpfile目录-- -s /sbin/nologin 表示没有登录权限 3.给用户分配权限:123[root@centos-linux /]# sudo chown -R ftpuser.ftpuser /ftpfile/-- sudo chown改变用户权限-- R表示把/ftpfile/文件递归都生效 4.查询用户以及组123[root@centos-linux /]# ll | grep ftpdrwxr-xr-x. 2 ftpuser ftpuser 4096 Jun 8 23:38 ftpfile-- 组和用户都是ftpuser 4.修改密码:12[root@centos-linux /]# sudo passwd ftpuser-- 这里都修改为123456 5.进入到ftp目录创建一个测试文件12[root@centos-linux /]# cd /ftpfile/[root@centos-linux ftpfile]# vim index.html 配置VSFTP服务器1.查找某一个文件的路径:whereis XXX12[root@centos-linux ~]# whereis vsftpdvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz 2.输入以下命令配置vsftpd的用户1[root@centos-linux ~]# sudo vim /etc/vsftpd/vsftpd.conf 3.搜索banner的节点进行配置123456/banner -- 搜索banner节点-- 找到该节点之后配置如下ftpd_banner=Welcome to JOSE FTP service.local_root=/ftpfile -- 登录后访问的路径anon_root=/ftpfile -- 怒名用户访问的路径 4.搜索chroot_list节点进行配置12345/chroot_list -- 搜索到之后配置如下chroot_list_enable=YES# (default follows)chroot_list_file=/etc/vsftpd/chroot_list 4.搜索anon,配置匿名访问123/anon -- 搜索到之后配置如下anonymous_enable=NO 5.复制刚才配置的chroot_list的最后路径并创建该文件1234567chroot_list_file=/etc/vsftpd/chroot_list[root@centos-linux ~]# cd /etc/vsftpd/[root@centos-linux vsftpd]# vim chroot_list-- 创建好文件之后添加用户(ftpuser)到chroot_list中ftpuser 6.在配置文件的末尾添加最小和最大端口123456pam_service_name=vsftpduserlist_enable=YEStcp_wrappers=YESpasv_min_port=61001pasv_max_port=62000 7.配置防火墙,打开防火墙配置文件,增加如下配置:123456789[root@centos-linux vsftpd]# sudo vim /etc/sysconfig/iptables#vsftpd-A INPUT -p TCP --dport 61001:62000 -j ACCEPT-A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT-A INPUT -p TCP --dport 20 -j ACCEPT-A OUTPUT -p TCP --dport 20 -j ACCEPT-A INPUT -p TCP --dport 21 -j ACCEPT-A OUTPUT -p TCP --dport 21 -j ACCEPT 8.重启防火墙和vsftpd服务器1234[root@centos-linux vsftpd]# sudo service iptables restart[root@centos-linux vsftpd]# sudo service vsftpd restartShutting down vsftpd: [ OK ]Starting vsftpd for vsftpd: [ OK ] 9修改selinux配置文件12345[root@centos-linux ftpfile]# sudo vim /etc/selinux/configSELINUX=disable-- 使其生效[root@centos-linux ftpfile]# sudo setenforce 0 10.打开终端连接ftp服务器:ftp xxx1234567891011shizhengyangdeMacBook-Pro% ftp 10.211.55.3Connected to 10.211.55.3.220 Welcome to JOSE FTP service.-- 输入ftpuser进行登录Name (10.211.55.3:panyuanyuan): ftpuser331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files. 注意点:编辑vsftpd的配置文件时,注意如下的配置要采用默认配置为NO,如果配置为NO证明我们不能访问上一级目录,如果配置为YES说明我们可以访问到上一级目录中12[root@centos-linux ~]# vim /etc/vsftpd/vsftpd.conf #chroot_local_user=YES -- 默认注释掉 当切换目录时,虽然提示成功,但是dir时还在这个目录中,这样比较安全12345678910111213141516ftp&gt; dir229 Entering Extended Passive Mode (|||61370|).150 Here comes the directory listing.drwxr-xr-x 2 501 501 4096 Jun 10 11:08 aadrwxr-xr-x 2 501 501 4096 Jun 10 11:23 ceshi-rw-r--r-- 1 0 0 17 Jun 08 23:54 index.html226 Directory send OK.ftp&gt; cd ..250 Directory successfully changed.ftp&gt; dir229 Entering Extended Passive Mode (|||61242|).150 Here comes the directory listing.drwxr-xr-x 2 501 501 4096 Jun 10 11:08 aadrwxr-xr-x 2 501 501 4096 Jun 10 11:23 ceshi-rw-r--r-- 1 0 0 17 Jun 08 23:54 index.html226 Directory send OK. 11.打开浏览器或者ftp链接工具测试 完结到这里FTP服务器的搭建和安装结束","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"电商实战(一)---环境配置之JDK|Tomcat","slug":"电商实战-一-环境配置","date":"2017-06-06T13:29:11.000Z","updated":"2017-06-06T13:29:11.000Z","comments":true,"path":"项目实战/2017/06/06/电商实战-一-环境配置.html","link":"","permalink":"http://www.fireworm.online/项目实战/2017/06/06/电商实战-一-环境配置.html","excerpt":"","text":"CentOS常用命令CentOs图形界面启动图形界面启动后输入:1init 5 查询某个已经安装软件的版本1rpm -qa | grep jdk 查询结果12java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64java-1.6.0-openjdk-1.6.0.38-1.13.10.4.el6.x86_64 删除默认openjdk1sudo yum remove java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64 CentOs切换用户到root1su root 下载安装java去oracle官网下载相应的java版本,这里选择的是jdk-7u80-linux-x64.rpm版本,当在浏览器中下载时,点击取消,复制其下载地址 终端下载打开终端,输入12wget xxxx(下载地址)wget http://101.44.1.119/files/9067000003768140/download.oracle.com/otn-pub/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm 下载完成之后,输入ls查看下载目录中多了:jdk-7u80-linux-x64.rpm文件 解压安装进入jdk下载的目录中输入:1sudo rpm -ivh jdk-7u80-linux-x64.rpm 等待安装完成,默认安装路径/user/java,进入路径查看123[root@centos-linux developer]# cd /usr/java/[root@centos-linux java]# lsdefault jdk1.7.0_80 latest 配置环境变量进入jdk安装目录:1234567[root@centos-linux java]# cd /usr/java/jdk1.7.0_80/[root@centos-linux jdk1.7.0_80]# lsbin lib src.zipCOPYRIGHT LICENSE THIRDPARTYLICENSEREADME-JAVAFX.txtdb man THIRDPARTYLICENSEREADME.txtinclude README.htmljre release 编辑/etc/profile配置环境变量:1vim /etc/profile 编辑文件末尾配置:12345678910111213141516for i in /etc/profile.d/*.sh ; do if [ -r &quot;$i&quot; ]; then if [ &quot;$&#123;-#*i&#125;&quot; != &quot;$-&quot; ]; then . &quot;$i&quot; else . &quot;$i&quot; &gt;/dev/null 2&gt;&amp;1 fi fidoneunset iunset -f pathmungeexport JAVA_HOME=/usr/java/jdk1.7.0_80export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH 使配置文件立即生效:1[root@centos-linux jdk1.7.0_80]# source /etc/profile 至此java安装完成. 下载安装Tomcat下载Tomcat进入我们创建的目录/developer下,进行下载,这里使用的下载地址是:http://learning.happymmall.com/tomcat/apache-tomcat-7.0.73.tar.gz1234[root@centos-linux Desktop]# cd /developer/[root@centos-linux developer]# lsjdk-7u80-linux-x64.rpm[root@centos-linux developer]# wget http://learning.happymmall.com/tomcat/apache-tomcat-7.0.73.tar.gz 解压下载的压缩包1tar -zxvf apache-tomcat-7.0.73.tar.gz 查看解压结果:12[root@centos-linux developer]# lldrwxr-xr-x. 9 root root 4096 Jun 8 00:05 apache-tomcat-7.0.73 修改Tomcat字符集编码进入到Tomcat目录,编辑conf/server.xml123sudo vim conf/server.xml -- 找到server.xml文件添加URIEncoding=\"UTF-8\"&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt; 启动Tomcat服务器进入到bin目录执行以下命令,看到started就证明启动成功12345678[root@centos-linux apache-tomcat-7.0.73]# cd bin/[root@centos-linux bin]# ./startup.sh Using CATALINA_BASE: /java_tool/apache-tomcat-7.0.73Using CATALINA_HOME: /java_tool/apache-tomcat-7.0.73Using CATALINA_TMPDIR: /java_tool/apache-tomcat-7.0.73/tempUsing JRE_HOME: /usr/java/jdk1.7.0_80Using CLASSPATH: /java_tool/apache-tomcat-7.0.73/bin/bootstrap.jar:/java_tool/apache-tomcat-7.0.73/bin/tomcat-juli.jarTomcat started. 访问linux对应的ip地址发现不能访问到Tomcat,这是因为我们没有关闭防火墙,执行以下的命令关闭防火墙后继续访问xxxx:8080发现访问成功.1234[root@centos-linux ~]# service iptables stopiptables: Setting chains to policy ACCEPT: mangle nat filte[ OK ]iptables: Flushing firewall rules: [ OK ]iptables: Unloading modules: [ OK ] Maven安安装Maven下载和解压缩进入到终端命令行,找到下载源输入以下命令进行下载:1[root@centos-linux developer]# wget http://learning.happymmall.com/maven/apache-maven-3.0.5-bin.tar.gz 等待下载完毕后解压缩:123456[root@centos-linux developer]# lltotal 148620-rw-r--r--. 1 root root 5144659 Apr 17 12:21 apache-maven-3.0.5-bin.tar.gz-rw-r--r--. 1 root root 8938514 Apr 17 12:22 apache-tomcat-7.0.73.tar.gz-rw-r--r--. 1 root root 138090286 May 19 2015 jdk-7u80-linux-x64.rpm[root@centos-linux developer]# tar -zxvf apache-maven-3.0.5-bin.tar.gz 移动解压好的maven包到指定目录(工具安装包)1[root@centos-linux developer]# mv apache-maven-3.0.5 /java_tool/ 配置Maven的环境变量1.找到maven的解压路径并复制:1cd /java_tool/apache-maven-3.0.5 2.编辑/etc/profile文件,加入环境变量:1sudo vim /etc/profile 3.在文件末尾添加如下的配置:1234export JAVA_HOME=/usr/java/jdk1.7.0_80export MAVEN_HOME=/java_tool/apache-maven-3.0.5export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH 4.使文件立即生效:1[root@centos-linux bin]# source /etc/profile 5.验证Maven环境变量:1234567[root@centos-linux bin]# mvn -versionApache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:28+0800)Maven home: /java_tool/apache-maven-3.0.5Java version: 1.7.0_80, vendor: Oracle CorporationJava home: /usr/java/jdk1.7.0_80/jreDefault locale: en_US, platform encoding: UTF-8OS name: \"linux\", version: \"2.6.32-642.el6.x86_64\", arch: \"amd64\", family: \"unix\"","categories":[{"name":"项目实战","slug":"项目实战","permalink":"http://www.fireworm.online/categories/项目实战/"}],"tags":[{"name":"电商后台","slug":"电商后台","permalink":"http://www.fireworm.online/tags/电商后台/"}]},{"title":"图解HTTP协议(一)---了解WEB及网络基础","slug":"图解HTTP协议-一-了解WEB及网络基础","date":"2017-06-04T04:42:25.000Z","updated":"2017-06-04T04:42:25.000Z","comments":true,"path":"uncategorized/2017/06/04/图解HTTP协议-一-了解WEB及网络基础.html","link":"","permalink":"http://www.fireworm.online/uncategorized/2017/06/04/图解HTTP协议-一-了解WEB及网络基础.html","excerpt":"","text":"TCP/IP协议中存在着各式各样的内存,我们把互联网相关联的协议集合称之为TCP/IP家族.还有一种认为就是TCP/IP是TCP协议家族和IP协议家族的总称. TCP/IP协议的分层管理TCP/IP重要的一点就是分层管理,按照层次可分为四层:应用层,传输层,网络层,数据链路层. 分层的优势值得一提的是层次化之后,设计也变得简单.处于应用层上的应用可以只考虑分给自己的任务,无需关注其他层的任务,比如数据怎么传输,传输给谁… 应用层的作用应用层决定了向用户提供服务时的通信服务.TCP/IP家族预存了各种通用的应用服务.比如ftp(文件传输协议),DNS域名解析协议.HTTP协议也属于其中.","categories":[],"tags":[]},{"title":"Thinking in Java(二)初始化与清理","slug":"Thinking in Java(二)初始化与清理","date":"2017-05-30T13:51:53.000Z","updated":"2017-05-30T13:51:53.000Z","comments":true,"path":"THINKING-IN-JAVA/2017/05/30/Thinking in Java(二)初始化与清理.html","link":"","permalink":"http://www.fireworm.online/THINKING-IN-JAVA/2017/05/30/Thinking in Java(二)初始化与清理.html","excerpt":"","text":"构造方法保证初始化 java会在用户操作对象之前自动调用相应的构造器,从而保证了初始化的进行 构造器是一种特殊的方法,因为它没有返回值,这与返回值void有明显的不通,构造器不会返回任何的东西 区分方法的重载重载的背景:在任何的编程语言中,相同的词语可以表达多种不同的含义—它们被重载了 区分重载方法: 每个重载的方法都必须有一个独一无二的参数列表 其实参数顺序也可以区分,但是一般不这么做,因为这样使代码难以维护 方法的重载与返回值类型无关 this关键字代表当前对象的引用假设你希望在方法的内部获取对当前对象的引用.由于这个引用是由编译器偷偷传递进去的,所以没有什么标识符可用;因此为了表示当前对象的引用,java引入了this关键字,它代表对当前对象的引用如果方法要返回当前对象的引用:1234567public class Leaf &#123; int i = 0; Leaf increament() &#123; i++; return this; &#125;&#125; 在构造器中调用构造器如果在构造器中需要调用其他的构造器,我们就可以使用this(param1, param2, …)的形式进行调用 垃圾回收器如何工作在C和C++语言中在堆内存上分配对象是非常昂贵的;然而,垃圾回收器提高了对象分配的效率,存储空间的释放会影响存储空间的分配.这也意味着java从堆内存分配空间的速度可以和其他语言从堆栈上分配的速度相媲美. 垃圾回收—引用计数器算法引用计数器是一种简单但是速度很慢的垃圾回收技术:每个对象都含有一个引用计数器,当有引用链接到对象时计数器+1.当有引用离开对象或者置为null时,引用计数器-1.垃圾回收器会在全部对象的列表上遍历,当发现某个对象的引用计数器是0的时候,就释放其所占用的空间.引用计数器尝尝用来说明垃圾回收器的工作方式,但是从未应用于任何一种java虚拟机中. 垃圾回收—停止-复制在一些更快的模式中,垃圾回收并非采用引用计数的模式.他们的依据思想是:对于任何活的对象,一定能最终追溯到其存活的堆栈或者静态区域中的引用.对于如何找到存活的对象,不同的虚拟机实现不同,有一种做法是停止-复制:显然这种做法是先停止程序的运行,然后将存活的对象复制到另外的一块空间中. 停止-复制算法的弊端 把对象从一处搬运到另外一处,所指向它的引用都必须进行修正. 需要两个分离的堆内存之间进行倒腾 程序稳定之后可能产生少量的垃圾甚至没有垃圾,但是还是会停止-复制 垃圾回收—标记-清扫为了避免上面停止-复制产生的弊端,又提出来了另外的一种模式:标记-清扫.早起sun公司的虚拟机就采用了这个.标记-清扫所依据的思想仍然是从堆栈和存储区域触发,遍历所有的引用,进而找到所有存活的对象,每当它找到一个就会打一个标记,这个过程不会回收任何的对象,只有全部标记完成之后,清理动作才会开始,在清理的过程中没有打标记的对象将会被释放,不会发生任何的复制动作,同停止-复制一样标记-清扫不是在后台运行的,也必须得停止程序. 标记-清扫算法的弊端 垃圾清除之后剩下的堆内存不是连续的 一般标记-清扫速度非常慢,之后当产生垃圾非常少或者不产生垃圾的时候,它的速度就很快了 综合考虑—自适应其实上面的暂停-复制和标记-清扫两种算法在虚拟机中都会用到.java虚拟机会进行自动监视:如果内存对象变动比较大,出现很多内存碎片,有大块的内存需要回收就采用停止-复制算法;但是当虚拟机发现所有的对象都很稳定,垃圾回收的速率比较低,就会切换到标记-清扫方式.这种自我调节的方式就是自适应技术. 静态初始化无论创建多少个对象,静态数据只会占用一份存储空间.static关键字不能用于局部变量 静态数据初始化时机当首次生成这个类的一个对象时或者首次访问那个类的静态数据成员时,进行静态区域的加载","categories":[{"name":"THINKING IN JAVA","slug":"THINKING-IN-JAVA","permalink":"http://www.fireworm.online/categories/THINKING-IN-JAVA/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://www.fireworm.online/tags/读书笔记/"}]},{"title":"FLOWABLE---配置","slug":"工作流引擎-配置","date":"2017-05-27T10:06:52.000Z","updated":"2017-05-27T10:06:52.000Z","comments":true,"path":"流程引擎/2017/05/27/工作流引擎-配置.html","link":"","permalink":"http://www.fireworm.online/流程引擎/2017/05/27/工作流引擎-配置.html","excerpt":"","text":"SpringConfig配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;import resource=\"classpath:applicationContext-base.xml\"/&gt; &lt;import resource=\"classpath:applicationContext-persistence.xml\"/&gt; &lt;import resource=\"classpath:applicationContext-confplusclient.xml\"/&gt; &lt;import resource=\"classpath:applicationContext-httpclient.xml\"/&gt; &lt;bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\"&gt; &lt;property name=\"driverClassName\" value=\"$&#123;mysql.driver&#125;\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://$&#123;mysql.address.flowengine&#125;/flow_engine?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;autoReconnect=true\"/&gt; &lt;property name=\"username\" value=\"$&#123;mysql.username.flowengine&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;mysql.password.flowengine&#125;\"/&gt; &lt;property name=\"initialSize\" value=\"$&#123;jdbc.connection.initialSize&#125;\"/&gt; &lt;property name=\"minIdle\" value=\"$&#123;jdbc.connection.minIdle&#125;\"/&gt; &lt;property name=\"maxActive\" value=\"$&#123;jdbc.connection.maxActive&#125;\"/&gt; &lt;property name=\"maxWait\" value=\"60000\"/&gt; &lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/&gt; &lt;property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/&gt; &lt;property name=\"defaultTransactionIsolation\" value=\"2\"/&gt; &lt;property name=\"validationQuery\" value=\"SELECT 'x'\"/&gt; &lt;property name=\"testWhileIdle\" value=\"true\"/&gt; &lt;property name=\"testOnBorrow\" value=\"true\"/&gt; &lt;property name=\"testOnReturn\" value=\"false\"/&gt; &lt;property name=\"removeAbandoned\" value=\"true\"/&gt; &lt;property name=\"removeAbandonedTimeout\" value=\"600\"/&gt; &lt;property name=\"logAbandoned\" value=\"true\"/&gt; &lt;property name=\"jdbcInterceptors\" value=\"ConnectionState;StatementFinalizer\"/&gt; &lt;/bean&gt; &lt;bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name=\"location\"&gt; &lt;value&gt;classpath:spring-config.properties&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=\"taskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\" lazy-init=\"true\"&gt; &lt;property name=\"corePoolSize\" value=\"10\"/&gt; &lt;property name=\"maxPoolSize\" value=\"50\"/&gt; &lt;property name=\"queueCapacity\" value=\"1000\"/&gt; &lt;property name=\"keepAliveSeconds\" value=\"300\"/&gt; &lt;property name=\"rejectedExecutionHandler\"&gt; &lt;bean class=\"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\"/&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=\"confplusUrl\" class=\"java.lang.String\"&gt; &lt;constructor-arg value=\"$&#123;url.confplus&#125;\"/&gt; &lt;/bean&gt; &lt;!-- 配置processEngineConfigeration --&gt; &lt;bean id=\"processEngineConfiguration\" class=\"org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration\"&gt; &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://$&#123;mysql.address.flowengine&#125;/flow_engine?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;autoReconnect=true\"/&gt; &lt;property name=\"jdbcUsername\" value=\"$&#123;mysql.username.flowengine&#125;\"/&gt; &lt;property name=\"jdbcPassword\" value=\"$&#123;mysql.password.flowengine&#125;\"/&gt; &lt;property name=\"jdbcDriver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"databaseSchemaUpdate\" value=\"true\"/&gt; &lt;property name=\"activityFontName\" value=\"思源黑体\" /&gt; &lt;property name=\"labelFontName\" value=\"思源黑体\" /&gt; &lt;/bean&gt; &lt;bean id=\"processEngine\" class=\"org.flowable.spring.ProcessEngineFactoryBean\"&gt; &lt;property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\"/&gt; &lt;/bean&gt; &lt;bean id=\"repositoryService\" factory-bean=\"processEngine\" factory-method=\"getRepositoryService\"/&gt; &lt;bean id=\"runtimeService\" factory-bean=\"processEngine\" factory-method=\"getRuntimeService\"/&gt; &lt;bean id=\"taskService\" factory-bean=\"processEngine\" factory-method=\"getTaskService\"/&gt; &lt;bean id=\"idmIdentityService\" factory-bean=\"processEngine\" factory-method=\"getIdmIdentityService\"/&gt; &lt;bean id=\"historyService\" factory-bean=\"processEngine\" factory-method=\"getHistoryService\"/&gt; &lt;bean id=\"managementService\" factory-bean=\"processEngine\" factory-method=\"getManagementService\"/&gt; &lt;bean id=\"identityService\" factory-bean=\"processEngine\" factory-method=\"getIdentityService\"/&gt; &lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt; &lt;property name=\"maxUploadSize\" value=\"268435456\"/&gt; &lt;/bean&gt;&lt;/beans&gt; Delegator调用外部接口1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/** * Caijiajia confidential * &lt;p&gt; * Copyright (C) 2017 Shanghai Shuhe Co., Ltd. All rights reserved. * &lt;p&gt; * No parts of this file may be reproduced or transmitted in any form or by any means, * electronic, mechanical, photocopying, recording, or otherwise, without prior written * permission of Shanghai Shuhe Co., Ltd. */package cn.caijiajia.flowengine.delegator;import cn.caijiajia.flowengine.configuration.Configs;import cn.caijiajia.flowengine.domain.DelegateDestination;import cn.caijiajia.flowengine.util.HttpClientUtil;import cn.caijiajia.framework.httpclient.HttpClientTemplate;import org.apache.commons.lang3.StringUtils;import org.flowable.engine.RuntimeService;import org.flowable.engine.delegate.DelegateExecution;import org.flowable.engine.delegate.Expression;import org.flowable.engine.delegate.JavaDelegate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.Map;/** * Created by Harry on 2017/4/19. */@Componentpublic class HttpClientDelegator implements JavaDelegate &#123; private static Logger logger = LoggerFactory.getLogger(HttpClientDelegator.class); @Autowired private Configs configs; @Autowired private RuntimeService runtimeService; @Autowired private HttpClientTemplate httpClientTemplate; private Expression destinationKey; public void execute(DelegateExecution execution) &#123; try &#123; String processInstanceId = execution.getProcessInstanceId(); Map&lt;String, Object&gt; variables = runtimeService.getVariables(processInstanceId); String key = (String) destinationKey.getValue(execution); if (StringUtils.isBlank(key)) &#123; logger.error(\"Unable to find destination key to get a valid delegate destination!\"); &#125; Map&lt;String, DelegateDestination&gt; destinations = configs.getDelegateDestinations(); DelegateDestination destination = destinations.get(key); if (destination == null) &#123; logger.error(\"Check if delegate destination has been configured in confplus!\"); &#125; String uri = HttpClientUtil.construct(destination.getForwardUri(), variables); Map&lt;String, String&gt; params = HttpClientUtil.validParams(destination.getParamsList(), variables); switch (destination.getRequestMethod()) &#123; case \"GET\": httpClientTemplate.doGet(uri, params); break; case \"POST\": httpClientTemplate.doPost(uri, params); break; case \"PUT\": httpClientTemplate.doPut(uri, params); break; case \"DELETE\": httpClientTemplate.doDelete(uri, params); break; default: logger.error(\"Http method \" + destination.getRequestMethod() + \" in process instance \" + processInstanceId + \"is not supported.\"); &#125; &#125; catch (Exception e) &#123; logger.error(\"Failed to send request external to uri.\", e); &#125; &#125;&#125;","categories":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/categories/流程引擎/"}],"tags":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/tags/流程引擎/"}]},{"title":"工作流引擎---TASK","slug":"工作流引擎-TASK","date":"2017-05-27T07:35:59.000Z","updated":"2017-05-27T07:35:59.000Z","comments":true,"path":"流程引擎/2017/05/27/工作流引擎-TASK.html","link":"","permalink":"http://www.fireworm.online/流程引擎/2017/05/27/工作流引擎-TASK.html","excerpt":"","text":"条件查询获取任务 name—根据事件名称模糊查询 status—根据事件状态查询 type根据事件类型查询 Controller层实现12345@RequestMapping(value = \"/auditTasks\", method = RequestMethod.GET)public Map&lt;String, Object&gt; getAuditEvents(String name, String status, String type, @RequestParam(defaultValue = \"1\")int pageNo, @RequestParam(defaultValue = \"20\") int pageSize) &#123; return taskService.getAuditEvents(name, status, type, pageNo, pageSize);&#125; 查看我的待审核列表—这里分页为静态分页,有问题12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/** * 待审核列表 * * @param name * @param status * @param type */public Map&lt;String, Object&gt; getAuditEvents(String name, String status, String type, int pageNo, int pageSize) &#123; Map&lt;String, Object&gt; map = Maps.newHashMap(); try &#123; List&lt;String&gt; processIdLists = Lists.newArrayList(); List&lt;Map&lt;String, Object&gt;&gt; auditList = Lists.newArrayList(); Map&lt;String, String&gt; taskProcessIdMap = Maps.newLinkedHashMap(); //根据人查询人所在的组 String assignee = ParameterThreadLocal.getUid(); List&lt;Group&gt; groupList = identityService.createGroupQuery().groupMember(assignee).list(); List&lt;String&gt; groupIdList = Lists.newArrayList(); for (Group groupIds : groupList) &#123; groupIdList.add(groupIds.getId()); &#125; //记录分页总数 TaskQuery taskQuery = taskService.createTaskQuery().taskCandidateGroupIn(groupIdList).orderByTaskCreateTime().desc(); //分页 listPage自带的方法不满足分页,需要手动拼成分页 List&lt;Task&gt; taskList = taskQuery.listPage((pageNo - 1) == 0 ? 0 : (pageNo - 1) * pageSize, pageSize); if (taskList != null &amp;&amp; taskList.size() &gt; 0) &#123; for (Task task : taskList) &#123; processIdLists.add(task.getProcessInstanceId()); taskProcessIdMap.put(task.getProcessInstanceId(), task.getId()); &#125; &#125; if (processIdLists != null &amp;&amp; processIdLists.size() &gt; 0) &#123; for (String processId : processIdLists) &#123; ProcessInstanceQuery processQuery = runtimeService.createProcessInstanceQuery().processInstanceId(processId); if (StringUtils.isNotBlank(name)) &#123; //模糊查询,需要手动添加 % processQuery.variableValueLikeIgnoreCase(&quot;name&quot;, &quot;%&quot; + name + &quot;%&quot;); &#125; // 目前全部为待审核状态,无需过滤// if (StringUtils.isNotBlank(status)) &#123;// processQuery.variableValueEqualsIgnoreCase(&quot;status&quot;, status);// &#125; if (StringUtils.isNotBlank(type)) &#123; processQuery.variableValueEqualsIgnoreCase(&quot;type&quot;, type); &#125; List&lt;ProcessInstance&gt; processInstanceList = processQuery.list(); //封装返回数据 for (ProcessInstance processInstance : processInstanceList) &#123; Map&lt;String, Object&gt; maps = runtimeService.getVariables(processInstance.getId()); Map&lt;String, Object&gt; resultMap = Maps.newLinkedHashMap(); for (Map.Entry entry : maps.entrySet()) &#123; resultMap.put(String.valueOf(entry.getKey()), entry.getValue()); &#125; resultMap.put(&quot;taskId&quot;, Integer.valueOf(taskProcessIdMap.get(processId))); //目前全部为待审核 resultMap.put(&quot;status&quot;, ApprovalStatus.STATUS_APPROVING); auditList.add(resultMap); &#125; &#125; &#125; map.put(&quot;total&quot;, taskQuery.count()); map.put(&quot;data&quot;, auditList); &#125; catch (Exception e) &#123; logger.warn(&quot;Get audit events failed. error = &quot;, e); &#125; return map;&#125; 获取已驳回任务Controller实现—权限控制,只有发起人才能看到自己驳回的任务1234@RequestMapping(value = \"/rejectTasks\", method = RequestMethod.GET)public Map&lt;String, Object&gt; getRejectTasks(String eventName, String eventType, String processDefinitionKey) &#123; return taskService.getRejectTasksByApplyer(eventName, eventType, processDefinitionKey);&#125; Service实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 查询驳回任务 * * @param eventName * @param eventType * @param processDefinitionKey */public Map&lt;String, Object&gt; getRejectTasksByApplyer(String eventName, String eventType, String processDefinitionKey) &#123; Map&lt;String, Object&gt; map = Maps.newHashMap(); List&lt;RejectTaskVo&gt; rejectTaskVoList = Lists.newArrayList(); String userId = ParameterThreadLocal.getUid(); /* 获取所有发起者是登录人的流程 */ ProcessInstanceQuery processQuery = runtimeService.createProcessInstanceQuery().processDefinitionKey(processDefinitionKey) .variableValueEqualsIgnoreCase(\"starter\", userId); if (!StringUtils.isEmpty(eventName)) &#123; processQuery.variableValueLikeIgnoreCase(\"name\", \"%\" + eventName + \"%\"); &#125; if (!StringUtils.isEmpty(eventType)) &#123; processQuery.variableValueLikeIgnoreCase(\"type\", \"%\" + eventType + \"%\"); &#125; List&lt;ProcessInstance&gt; processInstanceList = processQuery.list(); for (ProcessInstance processInstance : processInstanceList) &#123; List&lt;Comment&gt; comments = taskService.getProcessInstanceComments(processInstance.getId()); if (!comments.isEmpty() &amp;&amp; \"reject\".equals(comments.get(0).getType())) &#123; String currentTaskId = taskService.createTaskQuery().processInstanceId(processInstance.getId()).orderByTaskCreateTime().asc().listPage(0, 1).get(0).getId(); Comment comment = comments.get(comments.size() - 1); Map variables = runtimeService.getVariables(processInstance.getId()); RejectTaskVo rejectTaskVo = new RejectTaskVo(); rejectTaskVo.setEventId(Integer.valueOf((String) variables.get(\"id\"))); rejectTaskVo.setEventName((String) variables.get(\"name\")); rejectTaskVo.setEventType((String) variables.get(\"type\")); rejectTaskVo.setCurrentTaskId(currentTaskId); rejectTaskVo.setRejectPerson(comment.getUserId()); rejectTaskVo.setRejectTaskId(comment.getTaskId()); rejectTaskVo.setRejectTime(comment.getTime()); rejectTaskVo.setVariables(variables); rejectTaskVoList.add(rejectTaskVo); &#125; &#125; map.put(\"rejectTasks\", rejectTaskVoList); return map;&#125; 获取某个任务的评论Controller实现1234@RequestMapping(value = \"/getComment\", method = RequestMethod.GET)public String getComment(String taskId) &#123; return taskService.getCommentMessageByTaskId(taskId);&#125; Service实现12345678910111213141516171819202122232425262728293031/** * 根据taskId获取流程评论信息 * * @param taskId * @return */public String getCommentMessageByTaskId(String taskId) &#123; Comment comment = getCommentByTaskId(taskId); if (null == comment) &#123; return \"\"; &#125; else &#123; return comment.getFullMessage(); &#125;&#125;/** * 根据taskId获取流程评论 * * @param taskId * @return */private Comment getCommentByTaskId(String taskId) &#123; List&lt;Comment&gt; commentList = taskService.getTaskComments(taskId, \"reject\"); if(commentList.isEmpty()) &#123; return null; &#125; else &#123; return commentList.get(0); &#125;&#125; 驳回任务事件Controller实现12345678910/** * 驳回任务 * * @param taskId * @param completeTaskForm */@RequestMapping(value = \"/&#123;taskId&#125;/reverse\", method = RequestMethod.POST)public String rejectTask(@PathVariable String taskId, @RequestBody CompleteTaskForm completeTaskForm) &#123; return taskService.rejectTask(taskId, completeTaskForm);&#125; Service实现1234567891011121314151617181920212223242526272829/** * 驳回 * * @param taskId * @param completeTaskForm */public String rejectTask(String taskId, CompleteTaskForm completeTaskForm) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); if (StringUtils.isNotBlank(taskId) &amp;&amp; null != completeTaskForm) &#123; if (StringUtils.isBlank(completeTaskForm.getComment())) &#123; //驳回的时候,驳回原因为必填项 throw new CjjClientException(ErrorCodes.ERR_REJECT_COMMENT_FAILED, ErrorMsgs.ERR_REVERSE_COMMENT_MSG); &#125; String processInstanceId = taskService.createTaskQuery().taskId(taskId).singleResult().getProcessInstanceId(); String actor = ParameterThreadLocal.getUid(); //添加当前任务的完成者 Authentication.setAuthenticatedUserId(actor); //添加批注信息 taskService.addComment(taskId, processInstanceId, \"reject\", completeTaskForm.getComment()); String taskDefinitionKey = taskService.createTaskQuery().taskId(taskId).singleResult().getTaskDefinitionKey(); map.put(taskDefinitionKey + \"_message\", \"no\"); //完成任务 taskService.complete(taskId, map); return \"success\"; &#125; else &#123; return \"error\"; &#125;&#125; 完成任务实现12345678910111213141516171819202122232425262728/** * 完成任务 * * @param taskId * @param completeTaskForm */public String completeTask(String taskId, CompleteTaskForm completeTaskForm) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); if (StringUtils.isNotBlank(taskId) &amp;&amp; null != completeTaskForm) &#123; String processInstanceId = taskService.createTaskQuery().taskId(taskId).singleResult().getProcessInstanceId(); //添加当前任务的完成者 String actor = ParameterThreadLocal.getUid(); Authentication.setAuthenticatedUserId(actor); taskService.addComment(taskId, processInstanceId, \"complete\", \"已完成\"); String taskDefinitionKey = taskService.createTaskQuery().taskId(taskId).singleResult().getTaskDefinitionKey(); map.put(taskDefinitionKey + \"_message\", \"yes\"); //将可能更新后的变量放入变量列表中 if (completeTaskForm.getVariables() != null &amp;&amp; completeTaskForm.getVariables().size() &gt; 0) &#123; map.putAll(completeTaskForm.getVariables()); &#125; //完成任务 taskService.complete(taskId, map); return \"success\"; &#125; else &#123; return \"error\"; &#125;&#125;","categories":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/categories/流程引擎/"}],"tags":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/tags/流程引擎/"}]},{"title":"工作流引擎---EXCUTION","slug":"工作流引擎-EXCUTION","date":"2017-05-27T06:59:30.000Z","updated":"2017-05-27T06:59:30.000Z","comments":true,"path":"流程引擎/2017/05/27/工作流引擎-EXCUTION.html","link":"","permalink":"http://www.fireworm.online/流程引擎/2017/05/27/工作流引擎-EXCUTION.html","excerpt":"","text":"EXCUTION其实就是流程启动后对应的一个实例,每一个流程对应一个,在一个独立的流程中process(excution)–ID是唯一的 启动流程实例当我们部署好了之后就需要来启动流程实例,当我们以key的方式启动时,默认的会启动最后一次的部署12String processDefinitionKey = \"helloActivitiProcess\";ProcessInstance pi = processEngine.getRuntimeService().startProcessInstanceByKey(processDefinitionKey); 获取流程图,并高亮节点当我们流程启动并在运行的节点中,这时候为了全局的观测流程运行的进度,就需要以流程图片的方式展现,并且当前节点需要高亮.Controller层实现:123456789101112131415161718192021/** * 获取流程框图 * * @param processInstanceId * @param response * @return */@RequestMapping(value = \"/&#123;processInstanceId&#125;/diagram\", method = RequestMethod.GET)public Map&lt;String, Object&gt; getProcessDiagram(@PathVariable String processInstanceId, HttpServletResponse response) &#123; Map&lt;String, Object&gt; processDiagram = processInstanceService.getProcessDiagram(processInstanceId); if (processDiagram != null &amp;&amp; processDiagram.size() &gt; 0) &#123; String pngName = \"flowengine-\"+ processInstanceId +\".png\"; if (StringUtils.isNotBlank((String) processDiagram.get(\"pngName\"))) &#123; pngName = (String) processDiagram.get(\"pngName\"); &#125; if (processDiagram.get(\"pngStream\") != null) &#123; processInstanceService.downFile((InputStream) processDiagram.get(\"pngStream\"), pngName, response); &#125; &#125; return null;&#125; rocessInstanceService.getProcessDiagram(processInstanceId);方法12345678910111213141516171819202122232425262728293031323334/** * 获取流程状态图形化展示 * * @param processInstanceId * @return */public Map&lt;String, Object&gt; getProcessDiagram(String processInstanceId) &#123; if (StringUtils.isNotBlank(processInstanceId)) &#123; Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); TaskQuery query = taskService.createTaskQuery(); Task task = query.processInstanceId(processInstanceId).singleResult(); if (task != null) &#123; //获取下载文件名称 ProcessInstance instance = runtimeService.createProcessInstanceQuery() .processInstanceId(processInstanceId).singleResult(); ProcessDefinition definition = repositoryService.getProcessDefinition(instance.getProcessDefinitionId()); if (definition != null) &#123; result.put(\"pngName\", definition.getDiagramResourceName()); &#125; // 获取活动节点 BpmnModel bpmnModel = repositoryService.getBpmnModel(task.getProcessDefinitionId()); List&lt;String&gt; activityIds = runtimeService.getActiveActivityIds(task.getExecutionId()); InputStream inputStream = processEngine.getProcessEngineConfiguration() .getProcessDiagramGenerator() .generateDiagram(bpmnModel, \"png\", activityIds, new ArrayList(), processEngine.getProcessEngineConfiguration().getActivityFontName(), processEngine.getProcessEngineConfiguration().getLabelFontName(), null, null, 1.0); result.put(\"pngStream\", inputStream); return result; &#125; &#125; return null;&#125; 下载图片方法:processInstanceService.downFile1234567891011121314151617181920212223242526272829303132333435363738394041/** * 下载png图片 * * @param pngStream * @param response */public void downFile(InputStream pngStream, String pngName, HttpServletResponse response) &#123; if (pngStream != null) &#123; byte[] buffer = new byte[1024]; BufferedInputStream bis = new BufferedInputStream(pngStream); OutputStream os = null; response.setContentType(\"image/png\"); response.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + pngName); try &#123; os = response.getOutputStream(); int i = bis.read(buffer); while (i != -1) &#123; os.write(buffer, 0, i); i = bis.read(buffer); &#125; &#125; catch (IOException e) &#123; logger.error(\"output image error\", e); &#125; finally &#123; if (os != null) &#123; try &#123; os.close(); &#125; catch (IOException e) &#123; logger.warn(\"close stream resource failed \", e); &#125; &#125; if (bis != null) &#123; try &#123; bis.close(); &#125; catch (IOException e) &#123; logger.warn(\"close stream resource failed \", e); &#125; &#125; &#125; &#125;&#125; 根据条件查询流程实例123456789101112131415161718192021222324252627282930313233343536373839404142/** * 查询processIntances * * @param queryRequest * @return */public List&lt;ProcessInstanceVo&gt; queryProcessInstances(ProcessInstanceQueryForm queryRequest) &#123; ProcessInstanceQuery query = runtimeService.createProcessInstanceQuery(); if (queryRequest.getProcessInstanceId() != null) &#123; query.processInstanceId(queryRequest.getProcessInstanceId()); &#125; if (queryRequest.getProcessDefinitionKey() != null) &#123; query.processDefinitionKey(queryRequest.getProcessDefinitionKey()); &#125; if (queryRequest.getProcessDefinitionId() != null) &#123; query.processDefinitionId(queryRequest.getProcessDefinitionId()); &#125; if (queryRequest.getProcessBusinessKey() != null) &#123; query.processInstanceBusinessKey(queryRequest.getProcessBusinessKey()); &#125; if (queryRequest.getVariables() != null) &#123; addVariables(query, queryRequest.getVariables()); &#125; List&lt;ProcessInstanceVo&gt; instanceList = new ArrayList&lt;&gt;(); List&lt;ProcessInstance&gt; processInstances = query.list(); for (ProcessInstance processInstance : processInstances) &#123; ProcessInstanceVo processInstanceVo = new ProcessInstanceVo(); processInstanceVo.setProcessInstanceId(processInstance.getProcessInstanceId()); processInstanceVo.setProcessDefinitionId(processInstance.getProcessDefinitionId()); processInstanceVo.setProcessDefinitionKey(processInstance.getProcessDefinitionKey()); processInstanceVo.setProcessBusinessKey(processInstance.getBusinessKey()); processInstanceVo.setVariables(processInstance.getProcessVariables()); instanceList.add(processInstanceVo); &#125; return instanceList;&#125;","categories":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/categories/流程引擎/"}],"tags":[]},{"title":"工作流引擎---RE","slug":"工作流引擎-RE","date":"2017-05-27T03:17:39.000Z","updated":"2017-05-27T03:17:39.000Z","comments":true,"path":"流程引擎/2017/05/27/工作流引擎-RE.html","link":"","permalink":"http://www.fireworm.online/流程引擎/2017/05/27/工作流引擎-RE.html","excerpt":"","text":"部署一个流程我们部署流程引擎的时候可以选择bpmn和zip压缩后的方式: 方式一:bpmn文件的方式部署1234567891011/** * step-one:部署流程实例 * * @return */public static Deployment deploymentDefination() &#123; DeploymentBuilder deploymentBuilder = processEngine.getRepositoryService().createDeployment(); deploymentBuilder.addClasspathResource(\"coupon.bpmn\"); Deployment deploy = deploymentBuilder.deploy(); return deploy;&#125; 方式二:压缩文件的格式controller层上传压缩文件12345678910/** * 部署一个流程 * * @param bpmFile * @return */@RequestMapping(value = \"/deployments\", method = RequestMethod.POST)public Map&lt;String, Object&gt; createDeployment(MultipartFile bpmFile) &#123; return deploymentService.createDeployment(bpmFile);&#125; service层部署流程:createDeployment方法123456789101112131415161718192021222324252627282930/** * 部署一个流程bpm文件 * * @param bpmFile */public Map&lt;String, Object&gt; createDeployment(MultipartFile bpmFile) &#123; try &#123; Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); DeploymentBuilder deploymentBuilder = repositoryService.createDeployment(); String fileName = bpmFile.getOriginalFilename(); String type = bpmFile.getContentType(); if (!StringUtils.isEmpty(fileName)) &#123; if (type.equals(\"application/zip\")) &#123; ZipInputStream inputStream = new ZipInputStream(bpmFile.getInputStream()); deploymentBuilder.addZipInputStream(inputStream); &#125; else &#123; throw new FlowableIllegalArgumentException(\"流程bmp文件格式暂不支持\"); &#125; deploymentBuilder.name(fileName).deploy(); &#125; result.put(\"code\", 0); result.put(\"message\", \"部署成功\"); return result; &#125; catch (Exception e) &#123; throw new CjjClientException(ErrorCodes.ERR_DEPLOYMENT_FAILED, \"流程部署失败，bmpFie: \" + bpmFile.getOriginalFilename(), e); &#125;&#125; 查询部署的流程controller层123456789/** * 查看所有已部署流程 * * @return */@RequestMapping(value = \"/deplyments\", method = RequestMethod.GET)public Map&lt;String, Object&gt; queryDeployments() &#123; return deploymentService.queryDeployments();&#125; service层1234567891011121314151617181920212223public Map&lt;String, Object&gt; queryDeployments() &#123; Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); DeploymentQuery deploymentQuery = repositoryService.createDeploymentQuery(); List&lt;Deployment&gt; deploymentList = deploymentQuery.list(); List&lt;DeploymentVo&gt; deploymentVoList = new ArrayList&lt;&gt;(); if (deploymentList != null &amp;&amp; deploymentList.size() &gt; 0) &#123; for (Deployment deployment : deploymentList) &#123; DeploymentVo deploymentVo = new DeploymentVo(); deploymentVo.setId(deployment.getId()); deploymentVo.setName(deployment.getName()); deploymentVo.setCategory(deployment.getCategory()); deploymentVo.setKey(deployment.getKey()); deploymentVo.setDeploymentTime(deployment.getDeploymentTime()); deploymentVoList.add(deploymentVo); &#125; result.put(\"data\", deploymentVoList); &#125; result.put(\"code\", 0); return result;&#125;","categories":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/categories/流程引擎/"}],"tags":[{"name":"流程引擎","slug":"流程引擎","permalink":"http://www.fireworm.online/tags/流程引擎/"}]},{"title":"Thinking in Java(一)一切皆对象","slug":"Thinking-in-Java-一-一切皆对象","date":"2017-05-23T15:30:14.000Z","updated":"2017-05-23T15:30:14.000Z","comments":true,"path":"THINKING-IN-JAVA/2017/05/23/Thinking-in-Java-一-一切皆对象.html","link":"","permalink":"http://www.fireworm.online/THINKING-IN-JAVA/2017/05/23/Thinking-in-Java-一-一切皆对象.html","excerpt":"","text":"java的设计尽管java是基于C++开发的,但是java是一个纯粹的面向对象的程序设计语言;C++之所以成为一种杂合行的设计语言,是因为C++支持C语言的向后兼容,但是这种兼容却让C++变得臃肿,java是基于C++而简化了C++中比较臃肿的东西 引用操作对象每种计算机语言都有自己操作内存元素的方式.java是面向对象的,因此java采用一个固定的方式来操作内存中的元素: java中通过引用来操作对象 这就好比遥控器与电视的关系,我们操作的是遥控器,再由遥控器来操作电视 此外,即使没有电视机遥控器也可以独立的存在,也就是说你可以有一个引用,但是不必有对象与其关联 12//创建一个引用,没有对象指定String s; java中的内存模型 寄存器:寄存器是最快的存储区域,因为它位于处理器的内部.我们采用java是无法直接操作寄存器的 堆栈:堆栈是位于RAM(随机访问存储器),堆栈的指针向下移动则分配新的内存,堆栈指针向上移动则释放内存,堆栈的速度仅次于寄存器;我们平时使用的对象的引用就存在于堆栈中 堆:堆内存也位于RAM中,用于存储所有的java对象.当我们需要在堆栈中创建对象的时候只通过new关键字即可,当然这种方便也会带来一些额外的开销:用堆进行内存分配和清理比堆栈慢 常量寄存器:我们的常量一般是存储于代码中的,这样比较安全,我们也可以选择存储在ROM(只读存储器)中 非RAM存储器:如果数据完全存储于代码之外,比如流对象和持久化对象最终会被存储在磁盘或者其他的地方,这样反序列化的时候就会再次找到 基本数据类型的存储java中并不是所有的变量都是通过new来进行创建的,我们对于比较小的常用的数据类型不使用new关键字创建,而是创建一个并非引用的’自动’变量,将这个变量的值直接存储于堆栈中,这样提高了数据存储额效率 基本数据类型java中基本数据类型的大小都是固定的,这也是java夸平台原因之一 基本类型 大小 boolean - byte 1 short 2 int 4 long 8 float 4 double 8 所有的数值类型都具有正负号,不要去寻求无符号的数值类型,boolean占的大小没有指定,但是只能存储true/false 高精度数字java提供了两种高精度的计算:BigInteger和BigDecimal,能用基本数据类型操作的都可以用包装类型进行操作,但是需要调用方法.这么做复杂了许多,当然运算速度也慢了许多,这里是利用速度换取了精度 BigInteger支持任意精度的整数运算 BigDecimal支持任意精度的浮点型运算 类的描述我们知道java是面相对象的,并且知道用new关键字来创建对象.但是如何在开发中创建我们自定义类和对象的呢?其实类由两部分组成:成员方法和成员变量,成员变量描述类所具备的属性,成员方法说明了该类具有哪些功能 成员变量定义我们在类中定义了成员变量默认都会初始化的,但是局部变量不会默认进行初始化,所以我们在使用局部变量之前一定先给其初始化才行,负责编译器就会报错.以下是我们成员变量的默认初始化: 数据类型 默认值 boolean false char \\u0000 byte (byte)0 short (short)0 int 0 long 0L float 0.0F double 0.0 static关键字出现需求: 为某个特定的区域分配单一存储空间,而不需要考虑需要多少个对象 希望被static修饰的不与任何的对象所关联,只与当前的类相关 下面这段代码无论有多少个StaticTest对象StaticTest.i只会有一份存储空间,N个对象共享一个i.123calss StaticTest &#123; static int i = 47;&#125; 建议:在静态使用中,建议使用类直接调用,而不建议使用创建对象的方式,因为这样表现层次更加的明确,说明静态是属于类的,而并非对象的.","categories":[{"name":"THINKING IN JAVA","slug":"THINKING-IN-JAVA","permalink":"http://www.fireworm.online/categories/THINKING-IN-JAVA/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://www.fireworm.online/tags/读书笔记/"}]},{"title":"join链接查询","slug":"join链接查询","date":"2017-05-21T11:27:58.000Z","updated":"2017-05-21T11:27:58.000Z","comments":true,"path":"mysql/2017/05/21/join链接查询.html","link":"","permalink":"http://www.fireworm.online/mysql/2017/05/21/join链接查询.html","excerpt":"","text":"数据表结构表结构一:表结构二: Join从句的分类 Inner joininner join表示将两张表进行关联起来,查询里面的交集部分1SELECT * FROM user1 INNER JOIN user2 WHERE user1.username = user2.name; 查询结果:当查询*的时候是将两张表进行拼接起来 左外链接用途左外链接一般查询的是左表的所有和右表所匹配的数据,匹配不上的全是null1SELECT * FROM user1 LEFT JOIN user2 on user1.username = user2.name 查询结果:查询只存在于左表中的数据1SELECT * FROM user1 LEFT JOIN user2 on user1.username = user2.name WHERE user2.name IS NOT NULL 查询结果: 右外链接右外链接和左外链接是相对的,只不过是以右表为基准 全连接全连接表示可以查询出两个表所有的数据或两个表交集之外的数据代码演示:1SELECT * FROM user1 LEFT JOIN user2 ON user1.username = user2.name UNION ALL SELECT * FROM user1 RIGHT JOIN user2 ON user1.username = user2.name 查询结果:","categories":[{"name":"mysql","slug":"mysql","permalink":"http://www.fireworm.online/categories/mysql/"}],"tags":[{"name":"链接查询","slug":"链接查询","permalink":"http://www.fireworm.online/tags/链接查询/"}]},{"title":"mysql数据类型","slug":"mysql数据类型","date":"2017-05-21T08:55:47.000Z","updated":"2017-05-21T08:55:47.000Z","comments":true,"path":"mysql/2017/05/21/mysql数据类型.html","link":"","permalink":"http://www.fireworm.online/mysql/2017/05/21/mysql数据类型.html","excerpt":"","text":"mysql数据类型以及语句分类跟学习java一样,我们在学习mysql之前需要理解mysql中的数据类型,接下来就介绍一下mysql中的几种数据类型,具体的使用哪种数据类型还需要根据当时的场景来定义 整型 浮点型 字符型 时间类型 mysql的语句分类","categories":[{"name":"mysql","slug":"mysql","permalink":"http://www.fireworm.online/categories/mysql/"}],"tags":[{"name":"mysql基础","slug":"mysql基础","permalink":"http://www.fireworm.online/tags/mysql基础/"}]},{"title":"数组常用API","slug":"数组常用API","date":"2017-05-21T07:01:11.000Z","updated":"2017-05-21T07:01:11.000Z","comments":true,"path":"javaSE/2017/05/21/数组常用API.html","link":"","permalink":"http://www.fireworm.online/javaSE/2017/05/21/数组常用API.html","excerpt":"","text":"数组注意事项对于数组的定义和一般使用技巧,我们肯定都是比较熟悉了.这里主要介绍一下数据的一些好用API以及注意事项 数组的基本使用—创建数组 当创建一个数字型的数组时,所有元素都初始化为0 当创建boolean类型的数组时,所有元素都初始化为false 当创建一个对象数组时,所有元素都初始化为null,例如:12//创建一个包含十个字符串的数组,但是每一个的初始化字符串都是nullString[] str = new String[10] 数组工具类常用API—Arraysstatic T[] copyOf(T[] original, int newLength) —将original数组拷贝newLength个到一个新的数组中,方法的返回值是一个新的数组 static void sort(type[] a)—将数组进行排序,使用的是快排,效率比较高 static int binarySearch(type[] a, type key)—在数组a中进行二分查找key,如果查找成功则返回下标值,否则返回一个负数 static void fill(type[] a, type v)—将数组的所有数据元素赋值为v boolean equals(type[] a, type[] b)—如果两个数组大小相同,并且下标相同的元素都相同返回true,否则返回false","categories":[{"name":"javaSE","slug":"javaSE","permalink":"http://www.fireworm.online/categories/javaSE/"}],"tags":[{"name":"集合体系","slug":"集合体系","permalink":"http://www.fireworm.online/tags/集合体系/"}]},{"title":"BigDecimal","slug":"BigDecimal","date":"2017-05-21T04:00:33.000Z","updated":"2017-05-21T04:00:33.000Z","comments":true,"path":"javaSE/2017/05/21/BigDecimal.html","link":"","permalink":"http://www.fireworm.online/javaSE/2017/05/21/BigDecimal.html","excerpt":"","text":"大数据类型BigDecimal与Double我们知道在浮点类型做运算的时候存在损失精度的问题,这是因为计算机底层是以二进制的方式存储数据的,所以我们在和金钱打交道的时候就应该避免采用Double,而应该用大数据类型BigDecimal. BigDecimal与Double的实验分别采用两种方式计算两个小数的加法运算:1234567891011public static void testNaN() &#123; int num1 = 10; float num2 = 10.1F; double num3 = 10.2; BigDecimal add1 = BigDecimal.valueOf(10.1).add(BigDecimal.valueOf(10.2)); BigDecimal add2 = new BigDecimal(\"10.1\").add(new BigDecimal(\"10.2\")); BigDecimal add3 = BigDecimal.valueOf(num2).add(BigDecimal.valueOf(num3)); Double add4 = num3 + num2; System.out.println(add1 + \"****\" + add2 + \"****\" + add3 + \"****\" + add4);&#125; 执行结果120.3****20.3****20.300000381469727****20.300000381469726 得出结论浮点型的运算会存在误差问题,所以我们需要进行小数精确运算的时候应该采用BigDecimal,BigDecimal实现了任意精度的浮点型运算,保证了运算的正确性 使用心得我们在使用BigDecimal的时候应该采用构造方法,传入字符串的形式进行加减乘除计算 API的使用add(other) — 和 subtract(other) — 差 multiply(other) — 积 divid(other) — 商 mod(oher) — 余 int compareTo(other) — 比较两个数,如果相等返回0,如果小于other返回负数,如多大于other返回正数 valueOf(other) — 将基数值转换为大数据类型","categories":[{"name":"javaSE","slug":"javaSE","permalink":"http://www.fireworm.online/categories/javaSE/"}],"tags":[{"name":"BigDecimal数据类型","slug":"BigDecimal数据类型","permalink":"http://www.fireworm.online/tags/BigDecimal数据类型/"}]},{"title":"List集合切割工具类","slug":"List集合切割工具类","date":"2017-05-15T14:55:00.000Z","updated":"2017-05-15T14:55:00.000Z","comments":true,"path":"工具类/2017/05/15/List集合切割工具类.html","link":"","permalink":"http://www.fireworm.online/工具类/2017/05/15/List集合切割工具类.html","excerpt":"","text":"问题背景我们在处理List集合的时候难免会遇到集合的size比较大,这时候我们就需要将一个比较大的list集合拆分成几个size比较小的集合进型处理,这样操作主要是考虑到了性能的问题,所以以下的工具类是针对于一个大的List集合进行拆分的过程 代码实现1234567891011121314151617181920212223242526272829/** * 切割List集合,将其分成等分的 * * @param source * @param pageSize * @return */public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; splitList(List&lt;T&gt; source, Integer pageSize) &#123; if (null == source || source.size() == 0) &#123; return null; &#125; int size = source.size(); int num = size / pageSize + 1; // 切割list集合 List&lt;List&lt;T&gt;&gt; target = new ArrayList&lt;List&lt;T&gt;&gt;(); List&lt;T&gt; subList = null; for (int i = 0; i &lt; num; i++) &#123; int from = i * pageSize; //如果不是最后一个集合 if (i != num - 1) &#123; subList = source.subList(from, from + pageSize); &#125; else &#123; subList = source.subList(from, from + size % pageSize); &#125; target.add(subList); &#125; return target;&#125; 代码理解 num:表示大集合将要被切割的个数 pageSize表示每个小集合的size subList = source.subList(from, from + pageSize):如果不是最后一个集合,我们需要切割from 到from + pageSize个 subList = source.subList(from, from + size % pageSize): 如果切割刀最后一个集合的时候,我们需要从from切割到from + size的余数(size % pageSize) 功能测试12345678910111213public static void main(String[] args) &#123; List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); list.add(5); list.add(6); List&lt;List&lt;Integer&gt;&gt; splitList = splitList(list, 2); System.out.println(splitList);&#125; 测试运行结果[[1, 2], [3, 4], [5, 5], [6]]","categories":[{"name":"工具类","slug":"工具类","permalink":"http://www.fireworm.online/categories/工具类/"}],"tags":[{"name":"集合体系","slug":"集合体系","permalink":"http://www.fireworm.online/tags/集合体系/"}]}]}